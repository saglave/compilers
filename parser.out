Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    RIGHT_OP
    DEFAULT
    LEFT_OP
    COLON
    TRUE
    NEWLINE
    CASE
    TILDA
    DOT
    DEFINE
    HASH
    SIZEOF
    SINGLE_QUOTES
    ANDI
    INCLUDE
    AND
    SWITCH
    CONDOP
    DOUBLE_QUOTES
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> declaration
Rule 5     statement -> exp SEMI_COLON
Rule 6     statement -> iterative_statement
Rule 7     statement -> function
Rule 8     statement -> constant_statement
Rule 9     statement -> conditional_statement
Rule 10    statement -> COMMENT
Rule 11    constant_statement -> BREAK SEMI_COLON
Rule 12    constant_statement -> CONTINUE SEMI_COLON
Rule 13    constant_statement -> RETURN SEMI_COLON
Rule 14    constant_statement -> RETURN exp SEMI_COLON
Rule 15    declaration -> type enum_list SEMI_COLON
Rule 16    declaration -> type VARIABLE lparen parameters rparen SEMI_COLON
Rule 17    declaration -> type VARIABLE lparen rparen SEMI_COLON
Rule 18    enum_list -> VARIABLE COMMA enum_list
Rule 19    enum_list -> VARIABLE EQUALS exp COMMA enum_list
Rule 20    enum_list -> VARIABLE
Rule 21    enum_list -> VARIABLE EQUALS exp
Rule 22    enum_list -> VARIABLE LBIG exp RBIG COMMA enum_list
Rule 23    enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
Rule 24    enum_list -> VARIABLE LBIG exp RBIG
Rule 25    enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE
Rule 26    num_list -> exp COMMA num_list
Rule 27    num_list -> exp
Rule 28    type -> INT
Rule 29    type -> FLOAT
Rule 30    type -> CHAR
Rule 31    type -> DOUBLE
Rule 32    type -> VOID
Rule 33    type -> SHORT
Rule 34    type -> LONG
Rule 35    constant -> HEX_INT
Rule 36    constant -> DOT_REAL
Rule 37    constant -> EXP_REAL
Rule 38    constant -> DEC_INT
Rule 39    constant -> CHARACTER
Rule 40    exp -> exp ADD exp
Rule 41    exp -> exp MINUS exp
Rule 42    exp -> exp MULT exp
Rule 43    exp -> exp DIV exp
Rule 44    exp -> exp MOD exp
Rule 45    exp -> exp L_OP exp
Rule 46    exp -> exp G_OP exp
Rule 47    exp -> exp LE_OP exp
Rule 48    exp -> exp GE_OP exp
Rule 49    exp -> exp NOTEQUALS exp
Rule 50    exp -> exp EQUALS_OP exp
Rule 51    exp -> exp OR_OP exp
Rule 52    exp -> exp AND_OP exp
Rule 53    exp -> exp MUL_ASSIGN exp
Rule 54    exp -> exp DIV_ASSIGN exp
Rule 55    exp -> exp MOD_ASSIGN exp
Rule 56    exp -> exp ADD_ASSIGN exp
Rule 57    exp -> exp SUB_ASSIGN exp
Rule 58    exp -> exp LEFT_ASSIGN exp
Rule 59    exp -> exp RIGHT_ASSIGN exp
Rule 60    exp -> exp AND_ASSIGN exp
Rule 61    exp -> exp XOR_ASSIGN exp
Rule 62    exp -> exp OR_ASSIGN exp
Rule 63    exp -> exp EQUALS exp
Rule 64    exp -> unary_expression
Rule 65    exp -> lparen exp rparen
Rule 66    exp -> constant
Rule 67    exp -> VARIABLE
Rule 68    exp -> VARIABLE LBIG exp RBIG
Rule 69    exp -> function_call
Rule 70    unary_expression -> VARIABLE unary_operator
Rule 71    unary_expression -> unary_operator VARIABLE
Rule 72    unary_expression -> VARIABLE LBIG exp RBIG unary_operator
Rule 73    unary_expression -> unary_operator VARIABLE LBIG exp RBIG
Rule 74    unary_operator -> INCREMENT
Rule 75    unary_operator -> DECREMENT
Rule 76    iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
Rule 77    iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
Rule 78    iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
Rule 79    iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
Rule 80    iterative_statement -> WHILE lparen exp rparen statement
Rule 81    iterative_statement -> WHILE lparen exp rparen SEMI_COLON
Rule 82    iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace
Rule 83    iterative_statement -> WHILE lparen exp rparen lbrace rbrace
Rule 84    iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON
Rule 85    iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
Rule 86    iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
Rule 87    iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
Rule 88    iterative_exp -> exp COMMA iterative_exp
Rule 89    iterative_exp -> exp
Rule 90    conditional_statement -> IF lparen exp rparen statement
Rule 91    conditional_statement -> IF lparen exp rparen lbrace statements rbrace
Rule 92    conditional_statement -> IF lparen exp rparen statement ELSE statement
Rule 93    conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement
Rule 94    conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace
Rule 95    conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
Rule 96    function -> normal_function
Rule 97    function -> main_function
Rule 98    print_function -> PRINTF lparen exp rparen
Rule 99    main_function -> type MAIN lparen parameters rparen lbrace statements rbrace
Rule 100   main_function -> type MAIN lparen parameters rparen lbrace rbrace
Rule 101   main_function -> MAIN lparen parameters rparen lbrace statements rbrace
Rule 102   main_function -> MAIN lparen parameters rparen lbrace rbrace
Rule 103   main_function -> type MAIN lparen rparen lbrace statements rbrace
Rule 104   main_function -> type MAIN lparen rparen lbrace rbrace
Rule 105   main_function -> MAIN lparen rparen lbrace statements rbrace
Rule 106   main_function -> MAIN lparen rparen lbrace rbrace
Rule 107   normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace
Rule 108   normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace
Rule 109   normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace
Rule 110   normal_function -> VARIABLE lparen parameters rparen lbrace rbrace
Rule 111   normal_function -> type VARIABLE lparen rparen lbrace statements rbrace
Rule 112   normal_function -> type VARIABLE lparen rparen lbrace rbrace
Rule 113   normal_function -> VARIABLE lparen rparen lbrace statements rbrace
Rule 114   normal_function -> VARIABLE lparen rparen lbrace rbrace
Rule 115   parameters -> type VARIABLE COMMA parameters
Rule 116   parameters -> type VARIABLE
Rule 117   function_call -> VARIABLE lparen arguments rparen
Rule 118   function_call -> VARIABLE lparen rparen
Rule 119   function_call -> print_function
Rule 120   arguments -> arguments COMMA exp
Rule 121   arguments -> exp
Rule 122   lparen -> LPAREN
Rule 123   rparen -> RPAREN
Rule 124   lbrace -> LBRACE
Rule 125   rbrace -> RBRACE
Rule 126   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 40
ADD_ASSIGN           : 56
AND                  : 
ANDI                 : 
AND_ASSIGN           : 60
AND_OP               : 52
BREAK                : 11
CASE                 : 
CHAR                 : 30
CHARACTER            : 39
COLON                : 
COMMA                : 18 19 22 23 26 88 115 120
COMMENT              : 10
CONDOP               : 
CONTINUE             : 12
DECREMENT            : 75
DEC_INT              : 38
DEFAULT              : 
DEFINE               : 
DIV                  : 43
DIV_ASSIGN           : 54
DO                   : 84 85 86 87
DOT                  : 
DOT_REAL             : 36
DOUBLE               : 31
DOUBLE_QUOTES        : 
ELSE                 : 92 93 94 95
EQUALS               : 19 21 23 25 63
EQUALS_OP            : 50
EXP_REAL             : 37
FLOAT                : 29
FOR                  : 76 77 78 79
GE_OP                : 48
G_OP                 : 46
HASH                 : 
HEX_INT              : 35
IF                   : 90 91 92 93 94 95
INCLUDE              : 
INCREMENT            : 74
INT                  : 28
LBIG                 : 22 23 24 25 68 72 73
LBRACE               : 23 25 124
LEFT_ASSIGN          : 58
LEFT_OP              : 
LE_OP                : 47
LONG                 : 34
LPAREN               : 122
L_OP                 : 45
MAIN                 : 99 100 101 102 103 104 105 106
MINUS                : 41
MOD                  : 44
MOD_ASSIGN           : 55
MULT                 : 42
MUL_ASSIGN           : 53
NEWLINE              : 
NOT                  : 
NOTEQUALS            : 49
OR                   : 
OR_ASSIGN            : 62
OR_OP                : 51
PRINTF               : 98
RBIG                 : 22 23 24 25 68 72 73
RBRACE               : 23 25 125
RETURN               : 13 14
RIGHT_ASSIGN         : 59
RIGHT_OP             : 
RPAREN               : 123
SEMI_COLON           : 5 11 12 13 14 15 16 17 76 76 77 77 78 78 78 79 79 81 84 85 86 86 87
SHORT                : 33
SINGLE_QUOTES        : 
SIZEOF               : 
SUB_ASSIGN           : 57
SWITCH               : 
TILDA                : 
TRUE                 : 
VARIABLE             : 16 17 18 19 20 21 22 23 24 25 67 68 70 71 72 73 107 108 109 110 111 112 113 114 115 116 117 118
VOID                 : 32
WHILE                : 80 81 82 83 84 85 86 87
XOR_ASSIGN           : 61
error                : 

Nonterminals, with rules where they appear

arguments            : 117 120
conditional_statement : 9
constant             : 66
constant_statement   : 8
declaration          : 4
empty                : 
enum_list            : 15 18 19 22 23
exp                  : 5 14 19 21 22 23 24 25 26 27 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 65 68 72 73 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 98 120 121
function             : 7
function_call        : 69
iterative_exp        : 76 76 76 77 77 77 78 78 78 79 79 79 88
iterative_statement  : 6
lbrace               : 77 79 82 83 85 87 91 93 94 95 95 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114
lparen               : 16 17 65 76 77 78 79 80 81 82 83 84 85 86 87 90 91 92 93 94 95 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 117 118
main_function        : 97
normal_function      : 96
num_list             : 23 25 26
parameters           : 16 99 100 101 102 107 108 109 110 115
print_function       : 119
program              : 0
rbrace               : 77 79 82 83 85 87 91 93 94 95 95 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114
rparen               : 16 17 65 76 77 78 79 80 81 82 83 84 85 86 87 90 91 92 93 94 95 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 117 118
statement            : 2 3 76 80 84 90 92 92 93 94
statements           : 1 2 77 82 85 91 93 94 95 95 99 101 103 105 107 109 111 113
type                 : 15 16 17 99 100 103 104 107 108 111 112 115 116
unary_expression     : 64
unary_operator       : 70 71 72 73

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 3
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    program                        shift and go to state 20
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    constant_statement             shift and go to state 31
    print_function                 shift and go to state 34
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 1

    (13) constant_statement -> RETURN . SEMI_COLON
    (14) constant_statement -> RETURN . exp SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    SEMI_COLON      shift and go to state 45
    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 47
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 2

    (97) function -> main_function .

    RBRACE          reduce using rule 97 (function -> main_function .)
    COMMENT         reduce using rule 97 (function -> main_function .)
    VARIABLE        reduce using rule 97 (function -> main_function .)
    FOR             reduce using rule 97 (function -> main_function .)
    WHILE           reduce using rule 97 (function -> main_function .)
    DO              reduce using rule 97 (function -> main_function .)
    BREAK           reduce using rule 97 (function -> main_function .)
    CONTINUE        reduce using rule 97 (function -> main_function .)
    RETURN          reduce using rule 97 (function -> main_function .)
    IF              reduce using rule 97 (function -> main_function .)
    INT             reduce using rule 97 (function -> main_function .)
    FLOAT           reduce using rule 97 (function -> main_function .)
    CHAR            reduce using rule 97 (function -> main_function .)
    DOUBLE          reduce using rule 97 (function -> main_function .)
    VOID            reduce using rule 97 (function -> main_function .)
    SHORT           reduce using rule 97 (function -> main_function .)
    LONG            reduce using rule 97 (function -> main_function .)
    LPAREN          reduce using rule 97 (function -> main_function .)
    HEX_INT         reduce using rule 97 (function -> main_function .)
    DOT_REAL        reduce using rule 97 (function -> main_function .)
    EXP_REAL        reduce using rule 97 (function -> main_function .)
    DEC_INT         reduce using rule 97 (function -> main_function .)
    CHARACTER       reduce using rule 97 (function -> main_function .)
    MAIN            reduce using rule 97 (function -> main_function .)
    INCREMENT       reduce using rule 97 (function -> main_function .)
    DECREMENT       reduce using rule 97 (function -> main_function .)
    PRINTF          reduce using rule 97 (function -> main_function .)
    $end            reduce using rule 97 (function -> main_function .)
    ELSE            reduce using rule 97 (function -> main_function .)


state 3

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    $end            reduce using rule 1 (program -> statements .)
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    constant_statement             shift and go to state 31
    print_function                 shift and go to state 34
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 4

    (84) iterative_statement -> DO . statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> DO . lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> DO . SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> DO . lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (124) lbrace -> . LBRACE
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    SEMI_COLON      shift and go to state 49
    COMMENT         shift and go to state 14
    LBRACE          shift and go to state 51
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 50
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    lbrace                         shift and go to state 52
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 5

    (32) type -> VOID .

    VARIABLE        reduce using rule 32 (type -> VOID .)
    MAIN            reduce using rule 32 (type -> VOID .)


state 6

    (98) print_function -> PRINTF . lparen exp rparen
    (122) lparen -> . LPAREN

    LPAREN          shift and go to state 15

    lparen                         shift and go to state 53

state 7

    (39) constant -> CHARACTER .

    SEMI_COLON      reduce using rule 39 (constant -> CHARACTER .)
    ADD             reduce using rule 39 (constant -> CHARACTER .)
    MINUS           reduce using rule 39 (constant -> CHARACTER .)
    MULT            reduce using rule 39 (constant -> CHARACTER .)
    DIV             reduce using rule 39 (constant -> CHARACTER .)
    MOD             reduce using rule 39 (constant -> CHARACTER .)
    L_OP            reduce using rule 39 (constant -> CHARACTER .)
    G_OP            reduce using rule 39 (constant -> CHARACTER .)
    LE_OP           reduce using rule 39 (constant -> CHARACTER .)
    GE_OP           reduce using rule 39 (constant -> CHARACTER .)
    NOTEQUALS       reduce using rule 39 (constant -> CHARACTER .)
    EQUALS_OP       reduce using rule 39 (constant -> CHARACTER .)
    OR_OP           reduce using rule 39 (constant -> CHARACTER .)
    AND_OP          reduce using rule 39 (constant -> CHARACTER .)
    MUL_ASSIGN      reduce using rule 39 (constant -> CHARACTER .)
    DIV_ASSIGN      reduce using rule 39 (constant -> CHARACTER .)
    MOD_ASSIGN      reduce using rule 39 (constant -> CHARACTER .)
    ADD_ASSIGN      reduce using rule 39 (constant -> CHARACTER .)
    SUB_ASSIGN      reduce using rule 39 (constant -> CHARACTER .)
    LEFT_ASSIGN     reduce using rule 39 (constant -> CHARACTER .)
    RIGHT_ASSIGN    reduce using rule 39 (constant -> CHARACTER .)
    AND_ASSIGN      reduce using rule 39 (constant -> CHARACTER .)
    XOR_ASSIGN      reduce using rule 39 (constant -> CHARACTER .)
    OR_ASSIGN       reduce using rule 39 (constant -> CHARACTER .)
    EQUALS          reduce using rule 39 (constant -> CHARACTER .)
    RPAREN          reduce using rule 39 (constant -> CHARACTER .)
    COMMA           reduce using rule 39 (constant -> CHARACTER .)
    RBIG            reduce using rule 39 (constant -> CHARACTER .)
    RBRACE          reduce using rule 39 (constant -> CHARACTER .)


state 8

    (69) exp -> function_call .

    ADD             reduce using rule 69 (exp -> function_call .)
    MINUS           reduce using rule 69 (exp -> function_call .)
    MULT            reduce using rule 69 (exp -> function_call .)
    DIV             reduce using rule 69 (exp -> function_call .)
    MOD             reduce using rule 69 (exp -> function_call .)
    L_OP            reduce using rule 69 (exp -> function_call .)
    G_OP            reduce using rule 69 (exp -> function_call .)
    LE_OP           reduce using rule 69 (exp -> function_call .)
    GE_OP           reduce using rule 69 (exp -> function_call .)
    NOTEQUALS       reduce using rule 69 (exp -> function_call .)
    EQUALS_OP       reduce using rule 69 (exp -> function_call .)
    OR_OP           reduce using rule 69 (exp -> function_call .)
    AND_OP          reduce using rule 69 (exp -> function_call .)
    MUL_ASSIGN      reduce using rule 69 (exp -> function_call .)
    DIV_ASSIGN      reduce using rule 69 (exp -> function_call .)
    MOD_ASSIGN      reduce using rule 69 (exp -> function_call .)
    ADD_ASSIGN      reduce using rule 69 (exp -> function_call .)
    SUB_ASSIGN      reduce using rule 69 (exp -> function_call .)
    LEFT_ASSIGN     reduce using rule 69 (exp -> function_call .)
    RIGHT_ASSIGN    reduce using rule 69 (exp -> function_call .)
    AND_ASSIGN      reduce using rule 69 (exp -> function_call .)
    XOR_ASSIGN      reduce using rule 69 (exp -> function_call .)
    OR_ASSIGN       reduce using rule 69 (exp -> function_call .)
    EQUALS          reduce using rule 69 (exp -> function_call .)
    RPAREN          reduce using rule 69 (exp -> function_call .)
    COMMA           reduce using rule 69 (exp -> function_call .)
    SEMI_COLON      reduce using rule 69 (exp -> function_call .)
    RBIG            reduce using rule 69 (exp -> function_call .)
    RBRACE          reduce using rule 69 (exp -> function_call .)


state 9

    (30) type -> CHAR .

    VARIABLE        reduce using rule 30 (type -> CHAR .)
    MAIN            reduce using rule 30 (type -> CHAR .)


state 10

    (80) iterative_statement -> WHILE . lparen exp rparen statement
    (81) iterative_statement -> WHILE . lparen exp rparen SEMI_COLON
    (82) iterative_statement -> WHILE . lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> WHILE . lparen exp rparen lbrace rbrace
    (122) lparen -> . LPAREN

    LPAREN          shift and go to state 15

    lparen                         shift and go to state 54

state 11

    (33) type -> SHORT .

    VARIABLE        reduce using rule 33 (type -> SHORT .)
    MAIN            reduce using rule 33 (type -> SHORT .)


state 12

    (66) exp -> constant .

    ADD             reduce using rule 66 (exp -> constant .)
    MINUS           reduce using rule 66 (exp -> constant .)
    MULT            reduce using rule 66 (exp -> constant .)
    DIV             reduce using rule 66 (exp -> constant .)
    MOD             reduce using rule 66 (exp -> constant .)
    L_OP            reduce using rule 66 (exp -> constant .)
    G_OP            reduce using rule 66 (exp -> constant .)
    LE_OP           reduce using rule 66 (exp -> constant .)
    GE_OP           reduce using rule 66 (exp -> constant .)
    NOTEQUALS       reduce using rule 66 (exp -> constant .)
    EQUALS_OP       reduce using rule 66 (exp -> constant .)
    OR_OP           reduce using rule 66 (exp -> constant .)
    AND_OP          reduce using rule 66 (exp -> constant .)
    MUL_ASSIGN      reduce using rule 66 (exp -> constant .)
    DIV_ASSIGN      reduce using rule 66 (exp -> constant .)
    MOD_ASSIGN      reduce using rule 66 (exp -> constant .)
    ADD_ASSIGN      reduce using rule 66 (exp -> constant .)
    SUB_ASSIGN      reduce using rule 66 (exp -> constant .)
    LEFT_ASSIGN     reduce using rule 66 (exp -> constant .)
    RIGHT_ASSIGN    reduce using rule 66 (exp -> constant .)
    AND_ASSIGN      reduce using rule 66 (exp -> constant .)
    XOR_ASSIGN      reduce using rule 66 (exp -> constant .)
    OR_ASSIGN       reduce using rule 66 (exp -> constant .)
    EQUALS          reduce using rule 66 (exp -> constant .)
    RPAREN          reduce using rule 66 (exp -> constant .)
    COMMA           reduce using rule 66 (exp -> constant .)
    SEMI_COLON      reduce using rule 66 (exp -> constant .)
    RBIG            reduce using rule 66 (exp -> constant .)
    RBRACE          reduce using rule 66 (exp -> constant .)


state 13

    (6) statement -> iterative_statement .

    RBRACE          reduce using rule 6 (statement -> iterative_statement .)
    COMMENT         reduce using rule 6 (statement -> iterative_statement .)
    VARIABLE        reduce using rule 6 (statement -> iterative_statement .)
    FOR             reduce using rule 6 (statement -> iterative_statement .)
    WHILE           reduce using rule 6 (statement -> iterative_statement .)
    DO              reduce using rule 6 (statement -> iterative_statement .)
    BREAK           reduce using rule 6 (statement -> iterative_statement .)
    CONTINUE        reduce using rule 6 (statement -> iterative_statement .)
    RETURN          reduce using rule 6 (statement -> iterative_statement .)
    IF              reduce using rule 6 (statement -> iterative_statement .)
    INT             reduce using rule 6 (statement -> iterative_statement .)
    FLOAT           reduce using rule 6 (statement -> iterative_statement .)
    CHAR            reduce using rule 6 (statement -> iterative_statement .)
    DOUBLE          reduce using rule 6 (statement -> iterative_statement .)
    VOID            reduce using rule 6 (statement -> iterative_statement .)
    SHORT           reduce using rule 6 (statement -> iterative_statement .)
    LONG            reduce using rule 6 (statement -> iterative_statement .)
    LPAREN          reduce using rule 6 (statement -> iterative_statement .)
    HEX_INT         reduce using rule 6 (statement -> iterative_statement .)
    DOT_REAL        reduce using rule 6 (statement -> iterative_statement .)
    EXP_REAL        reduce using rule 6 (statement -> iterative_statement .)
    DEC_INT         reduce using rule 6 (statement -> iterative_statement .)
    CHARACTER       reduce using rule 6 (statement -> iterative_statement .)
    MAIN            reduce using rule 6 (statement -> iterative_statement .)
    INCREMENT       reduce using rule 6 (statement -> iterative_statement .)
    DECREMENT       reduce using rule 6 (statement -> iterative_statement .)
    PRINTF          reduce using rule 6 (statement -> iterative_statement .)
    $end            reduce using rule 6 (statement -> iterative_statement .)
    ELSE            reduce using rule 6 (statement -> iterative_statement .)


state 14

    (10) statement -> COMMENT .

    RBRACE          reduce using rule 10 (statement -> COMMENT .)
    COMMENT         reduce using rule 10 (statement -> COMMENT .)
    VARIABLE        reduce using rule 10 (statement -> COMMENT .)
    FOR             reduce using rule 10 (statement -> COMMENT .)
    WHILE           reduce using rule 10 (statement -> COMMENT .)
    DO              reduce using rule 10 (statement -> COMMENT .)
    BREAK           reduce using rule 10 (statement -> COMMENT .)
    CONTINUE        reduce using rule 10 (statement -> COMMENT .)
    RETURN          reduce using rule 10 (statement -> COMMENT .)
    IF              reduce using rule 10 (statement -> COMMENT .)
    INT             reduce using rule 10 (statement -> COMMENT .)
    FLOAT           reduce using rule 10 (statement -> COMMENT .)
    CHAR            reduce using rule 10 (statement -> COMMENT .)
    DOUBLE          reduce using rule 10 (statement -> COMMENT .)
    VOID            reduce using rule 10 (statement -> COMMENT .)
    SHORT           reduce using rule 10 (statement -> COMMENT .)
    LONG            reduce using rule 10 (statement -> COMMENT .)
    LPAREN          reduce using rule 10 (statement -> COMMENT .)
    HEX_INT         reduce using rule 10 (statement -> COMMENT .)
    DOT_REAL        reduce using rule 10 (statement -> COMMENT .)
    EXP_REAL        reduce using rule 10 (statement -> COMMENT .)
    DEC_INT         reduce using rule 10 (statement -> COMMENT .)
    CHARACTER       reduce using rule 10 (statement -> COMMENT .)
    MAIN            reduce using rule 10 (statement -> COMMENT .)
    INCREMENT       reduce using rule 10 (statement -> COMMENT .)
    DECREMENT       reduce using rule 10 (statement -> COMMENT .)
    PRINTF          reduce using rule 10 (statement -> COMMENT .)
    $end            reduce using rule 10 (statement -> COMMENT .)
    ELSE            reduce using rule 10 (statement -> COMMENT .)


state 15

    (122) lparen -> LPAREN .

    VARIABLE        reduce using rule 122 (lparen -> LPAREN .)
    LPAREN          reduce using rule 122 (lparen -> LPAREN .)
    HEX_INT         reduce using rule 122 (lparen -> LPAREN .)
    DOT_REAL        reduce using rule 122 (lparen -> LPAREN .)
    EXP_REAL        reduce using rule 122 (lparen -> LPAREN .)
    DEC_INT         reduce using rule 122 (lparen -> LPAREN .)
    CHARACTER       reduce using rule 122 (lparen -> LPAREN .)
    INCREMENT       reduce using rule 122 (lparen -> LPAREN .)
    DECREMENT       reduce using rule 122 (lparen -> LPAREN .)
    PRINTF          reduce using rule 122 (lparen -> LPAREN .)
    RPAREN          reduce using rule 122 (lparen -> LPAREN .)
    INT             reduce using rule 122 (lparen -> LPAREN .)
    FLOAT           reduce using rule 122 (lparen -> LPAREN .)
    CHAR            reduce using rule 122 (lparen -> LPAREN .)
    DOUBLE          reduce using rule 122 (lparen -> LPAREN .)
    VOID            reduce using rule 122 (lparen -> LPAREN .)
    SHORT           reduce using rule 122 (lparen -> LPAREN .)
    LONG            reduce using rule 122 (lparen -> LPAREN .)


state 16

    (101) main_function -> MAIN . lparen parameters rparen lbrace statements rbrace
    (102) main_function -> MAIN . lparen parameters rparen lbrace rbrace
    (105) main_function -> MAIN . lparen rparen lbrace statements rbrace
    (106) main_function -> MAIN . lparen rparen lbrace rbrace
    (122) lparen -> . LPAREN

    LPAREN          shift and go to state 15

    lparen                         shift and go to state 55

state 17

    (37) constant -> EXP_REAL .

    SEMI_COLON      reduce using rule 37 (constant -> EXP_REAL .)
    ADD             reduce using rule 37 (constant -> EXP_REAL .)
    MINUS           reduce using rule 37 (constant -> EXP_REAL .)
    MULT            reduce using rule 37 (constant -> EXP_REAL .)
    DIV             reduce using rule 37 (constant -> EXP_REAL .)
    MOD             reduce using rule 37 (constant -> EXP_REAL .)
    L_OP            reduce using rule 37 (constant -> EXP_REAL .)
    G_OP            reduce using rule 37 (constant -> EXP_REAL .)
    LE_OP           reduce using rule 37 (constant -> EXP_REAL .)
    GE_OP           reduce using rule 37 (constant -> EXP_REAL .)
    NOTEQUALS       reduce using rule 37 (constant -> EXP_REAL .)
    EQUALS_OP       reduce using rule 37 (constant -> EXP_REAL .)
    OR_OP           reduce using rule 37 (constant -> EXP_REAL .)
    AND_OP          reduce using rule 37 (constant -> EXP_REAL .)
    MUL_ASSIGN      reduce using rule 37 (constant -> EXP_REAL .)
    DIV_ASSIGN      reduce using rule 37 (constant -> EXP_REAL .)
    MOD_ASSIGN      reduce using rule 37 (constant -> EXP_REAL .)
    ADD_ASSIGN      reduce using rule 37 (constant -> EXP_REAL .)
    SUB_ASSIGN      reduce using rule 37 (constant -> EXP_REAL .)
    LEFT_ASSIGN     reduce using rule 37 (constant -> EXP_REAL .)
    RIGHT_ASSIGN    reduce using rule 37 (constant -> EXP_REAL .)
    AND_ASSIGN      reduce using rule 37 (constant -> EXP_REAL .)
    XOR_ASSIGN      reduce using rule 37 (constant -> EXP_REAL .)
    OR_ASSIGN       reduce using rule 37 (constant -> EXP_REAL .)
    EQUALS          reduce using rule 37 (constant -> EXP_REAL .)
    RPAREN          reduce using rule 37 (constant -> EXP_REAL .)
    COMMA           reduce using rule 37 (constant -> EXP_REAL .)
    RBIG            reduce using rule 37 (constant -> EXP_REAL .)
    RBRACE          reduce using rule 37 (constant -> EXP_REAL .)


state 18

    (38) constant -> DEC_INT .

    SEMI_COLON      reduce using rule 38 (constant -> DEC_INT .)
    ADD             reduce using rule 38 (constant -> DEC_INT .)
    MINUS           reduce using rule 38 (constant -> DEC_INT .)
    MULT            reduce using rule 38 (constant -> DEC_INT .)
    DIV             reduce using rule 38 (constant -> DEC_INT .)
    MOD             reduce using rule 38 (constant -> DEC_INT .)
    L_OP            reduce using rule 38 (constant -> DEC_INT .)
    G_OP            reduce using rule 38 (constant -> DEC_INT .)
    LE_OP           reduce using rule 38 (constant -> DEC_INT .)
    GE_OP           reduce using rule 38 (constant -> DEC_INT .)
    NOTEQUALS       reduce using rule 38 (constant -> DEC_INT .)
    EQUALS_OP       reduce using rule 38 (constant -> DEC_INT .)
    OR_OP           reduce using rule 38 (constant -> DEC_INT .)
    AND_OP          reduce using rule 38 (constant -> DEC_INT .)
    MUL_ASSIGN      reduce using rule 38 (constant -> DEC_INT .)
    DIV_ASSIGN      reduce using rule 38 (constant -> DEC_INT .)
    MOD_ASSIGN      reduce using rule 38 (constant -> DEC_INT .)
    ADD_ASSIGN      reduce using rule 38 (constant -> DEC_INT .)
    SUB_ASSIGN      reduce using rule 38 (constant -> DEC_INT .)
    LEFT_ASSIGN     reduce using rule 38 (constant -> DEC_INT .)
    RIGHT_ASSIGN    reduce using rule 38 (constant -> DEC_INT .)
    AND_ASSIGN      reduce using rule 38 (constant -> DEC_INT .)
    XOR_ASSIGN      reduce using rule 38 (constant -> DEC_INT .)
    OR_ASSIGN       reduce using rule 38 (constant -> DEC_INT .)
    EQUALS          reduce using rule 38 (constant -> DEC_INT .)
    RPAREN          reduce using rule 38 (constant -> DEC_INT .)
    COMMA           reduce using rule 38 (constant -> DEC_INT .)
    RBIG            reduce using rule 38 (constant -> DEC_INT .)
    RBRACE          reduce using rule 38 (constant -> DEC_INT .)


state 19

    (9) statement -> conditional_statement .

    RBRACE          reduce using rule 9 (statement -> conditional_statement .)
    COMMENT         reduce using rule 9 (statement -> conditional_statement .)
    VARIABLE        reduce using rule 9 (statement -> conditional_statement .)
    FOR             reduce using rule 9 (statement -> conditional_statement .)
    WHILE           reduce using rule 9 (statement -> conditional_statement .)
    DO              reduce using rule 9 (statement -> conditional_statement .)
    BREAK           reduce using rule 9 (statement -> conditional_statement .)
    CONTINUE        reduce using rule 9 (statement -> conditional_statement .)
    RETURN          reduce using rule 9 (statement -> conditional_statement .)
    IF              reduce using rule 9 (statement -> conditional_statement .)
    INT             reduce using rule 9 (statement -> conditional_statement .)
    FLOAT           reduce using rule 9 (statement -> conditional_statement .)
    CHAR            reduce using rule 9 (statement -> conditional_statement .)
    DOUBLE          reduce using rule 9 (statement -> conditional_statement .)
    VOID            reduce using rule 9 (statement -> conditional_statement .)
    SHORT           reduce using rule 9 (statement -> conditional_statement .)
    LONG            reduce using rule 9 (statement -> conditional_statement .)
    LPAREN          reduce using rule 9 (statement -> conditional_statement .)
    HEX_INT         reduce using rule 9 (statement -> conditional_statement .)
    DOT_REAL        reduce using rule 9 (statement -> conditional_statement .)
    EXP_REAL        reduce using rule 9 (statement -> conditional_statement .)
    DEC_INT         reduce using rule 9 (statement -> conditional_statement .)
    CHARACTER       reduce using rule 9 (statement -> conditional_statement .)
    MAIN            reduce using rule 9 (statement -> conditional_statement .)
    INCREMENT       reduce using rule 9 (statement -> conditional_statement .)
    DECREMENT       reduce using rule 9 (statement -> conditional_statement .)
    PRINTF          reduce using rule 9 (statement -> conditional_statement .)
    $end            reduce using rule 9 (statement -> conditional_statement .)
    ELSE            reduce using rule 9 (statement -> conditional_statement .)


state 20

    (0) S' -> program .



state 21

    (3) statements -> statement .

    RBRACE          reduce using rule 3 (statements -> statement .)
    COMMENT         reduce using rule 3 (statements -> statement .)
    VARIABLE        reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    DO              reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    CONTINUE        reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    INT             reduce using rule 3 (statements -> statement .)
    FLOAT           reduce using rule 3 (statements -> statement .)
    CHAR            reduce using rule 3 (statements -> statement .)
    DOUBLE          reduce using rule 3 (statements -> statement .)
    VOID            reduce using rule 3 (statements -> statement .)
    SHORT           reduce using rule 3 (statements -> statement .)
    LONG            reduce using rule 3 (statements -> statement .)
    LPAREN          reduce using rule 3 (statements -> statement .)
    HEX_INT         reduce using rule 3 (statements -> statement .)
    DOT_REAL        reduce using rule 3 (statements -> statement .)
    EXP_REAL        reduce using rule 3 (statements -> statement .)
    DEC_INT         reduce using rule 3 (statements -> statement .)
    CHARACTER       reduce using rule 3 (statements -> statement .)
    MAIN            reduce using rule 3 (statements -> statement .)
    INCREMENT       reduce using rule 3 (statements -> statement .)
    DECREMENT       reduce using rule 3 (statements -> statement .)
    PRINTF          reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 22

    (36) constant -> DOT_REAL .

    SEMI_COLON      reduce using rule 36 (constant -> DOT_REAL .)
    ADD             reduce using rule 36 (constant -> DOT_REAL .)
    MINUS           reduce using rule 36 (constant -> DOT_REAL .)
    MULT            reduce using rule 36 (constant -> DOT_REAL .)
    DIV             reduce using rule 36 (constant -> DOT_REAL .)
    MOD             reduce using rule 36 (constant -> DOT_REAL .)
    L_OP            reduce using rule 36 (constant -> DOT_REAL .)
    G_OP            reduce using rule 36 (constant -> DOT_REAL .)
    LE_OP           reduce using rule 36 (constant -> DOT_REAL .)
    GE_OP           reduce using rule 36 (constant -> DOT_REAL .)
    NOTEQUALS       reduce using rule 36 (constant -> DOT_REAL .)
    EQUALS_OP       reduce using rule 36 (constant -> DOT_REAL .)
    OR_OP           reduce using rule 36 (constant -> DOT_REAL .)
    AND_OP          reduce using rule 36 (constant -> DOT_REAL .)
    MUL_ASSIGN      reduce using rule 36 (constant -> DOT_REAL .)
    DIV_ASSIGN      reduce using rule 36 (constant -> DOT_REAL .)
    MOD_ASSIGN      reduce using rule 36 (constant -> DOT_REAL .)
    ADD_ASSIGN      reduce using rule 36 (constant -> DOT_REAL .)
    SUB_ASSIGN      reduce using rule 36 (constant -> DOT_REAL .)
    LEFT_ASSIGN     reduce using rule 36 (constant -> DOT_REAL .)
    RIGHT_ASSIGN    reduce using rule 36 (constant -> DOT_REAL .)
    AND_ASSIGN      reduce using rule 36 (constant -> DOT_REAL .)
    XOR_ASSIGN      reduce using rule 36 (constant -> DOT_REAL .)
    OR_ASSIGN       reduce using rule 36 (constant -> DOT_REAL .)
    EQUALS          reduce using rule 36 (constant -> DOT_REAL .)
    RPAREN          reduce using rule 36 (constant -> DOT_REAL .)
    COMMA           reduce using rule 36 (constant -> DOT_REAL .)
    RBIG            reduce using rule 36 (constant -> DOT_REAL .)
    RBRACE          reduce using rule 36 (constant -> DOT_REAL .)


state 23

    (15) declaration -> type . enum_list SEMI_COLON
    (16) declaration -> type . VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> type . VARIABLE lparen rparen SEMI_COLON
    (107) normal_function -> type . VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> type . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> type . VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> type . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> type . MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> type . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> type . MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> type . MAIN lparen rparen lbrace rbrace
    (18) enum_list -> . VARIABLE COMMA enum_list
    (19) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (20) enum_list -> . VARIABLE
    (21) enum_list -> . VARIABLE EQUALS exp
    (22) enum_list -> . VARIABLE LBIG exp RBIG COMMA enum_list
    (23) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (24) enum_list -> . VARIABLE LBIG exp RBIG
    (25) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    VARIABLE        shift and go to state 57
    MAIN            shift and go to state 58

    enum_list                      shift and go to state 56

state 24

    (71) unary_expression -> unary_operator . VARIABLE
    (73) unary_expression -> unary_operator . VARIABLE LBIG exp RBIG

    VARIABLE        shift and go to state 59


state 25

    (7) statement -> function .

    RBRACE          reduce using rule 7 (statement -> function .)
    COMMENT         reduce using rule 7 (statement -> function .)
    VARIABLE        reduce using rule 7 (statement -> function .)
    FOR             reduce using rule 7 (statement -> function .)
    WHILE           reduce using rule 7 (statement -> function .)
    DO              reduce using rule 7 (statement -> function .)
    BREAK           reduce using rule 7 (statement -> function .)
    CONTINUE        reduce using rule 7 (statement -> function .)
    RETURN          reduce using rule 7 (statement -> function .)
    IF              reduce using rule 7 (statement -> function .)
    INT             reduce using rule 7 (statement -> function .)
    FLOAT           reduce using rule 7 (statement -> function .)
    CHAR            reduce using rule 7 (statement -> function .)
    DOUBLE          reduce using rule 7 (statement -> function .)
    VOID            reduce using rule 7 (statement -> function .)
    SHORT           reduce using rule 7 (statement -> function .)
    LONG            reduce using rule 7 (statement -> function .)
    LPAREN          reduce using rule 7 (statement -> function .)
    HEX_INT         reduce using rule 7 (statement -> function .)
    DOT_REAL        reduce using rule 7 (statement -> function .)
    EXP_REAL        reduce using rule 7 (statement -> function .)
    DEC_INT         reduce using rule 7 (statement -> function .)
    CHARACTER       reduce using rule 7 (statement -> function .)
    MAIN            reduce using rule 7 (statement -> function .)
    INCREMENT       reduce using rule 7 (statement -> function .)
    DECREMENT       reduce using rule 7 (statement -> function .)
    PRINTF          reduce using rule 7 (statement -> function .)
    $end            reduce using rule 7 (statement -> function .)
    ELSE            reduce using rule 7 (statement -> function .)


state 26

    (74) unary_operator -> INCREMENT .

    VARIABLE        reduce using rule 74 (unary_operator -> INCREMENT .)
    SEMI_COLON      reduce using rule 74 (unary_operator -> INCREMENT .)
    ADD             reduce using rule 74 (unary_operator -> INCREMENT .)
    MINUS           reduce using rule 74 (unary_operator -> INCREMENT .)
    MULT            reduce using rule 74 (unary_operator -> INCREMENT .)
    DIV             reduce using rule 74 (unary_operator -> INCREMENT .)
    MOD             reduce using rule 74 (unary_operator -> INCREMENT .)
    L_OP            reduce using rule 74 (unary_operator -> INCREMENT .)
    G_OP            reduce using rule 74 (unary_operator -> INCREMENT .)
    LE_OP           reduce using rule 74 (unary_operator -> INCREMENT .)
    GE_OP           reduce using rule 74 (unary_operator -> INCREMENT .)
    NOTEQUALS       reduce using rule 74 (unary_operator -> INCREMENT .)
    EQUALS_OP       reduce using rule 74 (unary_operator -> INCREMENT .)
    OR_OP           reduce using rule 74 (unary_operator -> INCREMENT .)
    AND_OP          reduce using rule 74 (unary_operator -> INCREMENT .)
    MUL_ASSIGN      reduce using rule 74 (unary_operator -> INCREMENT .)
    DIV_ASSIGN      reduce using rule 74 (unary_operator -> INCREMENT .)
    MOD_ASSIGN      reduce using rule 74 (unary_operator -> INCREMENT .)
    ADD_ASSIGN      reduce using rule 74 (unary_operator -> INCREMENT .)
    SUB_ASSIGN      reduce using rule 74 (unary_operator -> INCREMENT .)
    LEFT_ASSIGN     reduce using rule 74 (unary_operator -> INCREMENT .)
    RIGHT_ASSIGN    reduce using rule 74 (unary_operator -> INCREMENT .)
    AND_ASSIGN      reduce using rule 74 (unary_operator -> INCREMENT .)
    XOR_ASSIGN      reduce using rule 74 (unary_operator -> INCREMENT .)
    OR_ASSIGN       reduce using rule 74 (unary_operator -> INCREMENT .)
    EQUALS          reduce using rule 74 (unary_operator -> INCREMENT .)
    RPAREN          reduce using rule 74 (unary_operator -> INCREMENT .)
    COMMA           reduce using rule 74 (unary_operator -> INCREMENT .)
    RBIG            reduce using rule 74 (unary_operator -> INCREMENT .)
    RBRACE          reduce using rule 74 (unary_operator -> INCREMENT .)


state 27

    (76) iterative_statement -> FOR . lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> FOR . lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> FOR . lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> FOR . lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (122) lparen -> . LPAREN

    LPAREN          shift and go to state 15

    lparen                         shift and go to state 60

state 28

    (65) exp -> lparen . exp rparen
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    lparen                         shift and go to state 28
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    exp                            shift and go to state 61
    unary_operator                 shift and go to state 24

state 29

    (4) statement -> declaration .

    RBRACE          reduce using rule 4 (statement -> declaration .)
    COMMENT         reduce using rule 4 (statement -> declaration .)
    VARIABLE        reduce using rule 4 (statement -> declaration .)
    FOR             reduce using rule 4 (statement -> declaration .)
    WHILE           reduce using rule 4 (statement -> declaration .)
    DO              reduce using rule 4 (statement -> declaration .)
    BREAK           reduce using rule 4 (statement -> declaration .)
    CONTINUE        reduce using rule 4 (statement -> declaration .)
    RETURN          reduce using rule 4 (statement -> declaration .)
    IF              reduce using rule 4 (statement -> declaration .)
    INT             reduce using rule 4 (statement -> declaration .)
    FLOAT           reduce using rule 4 (statement -> declaration .)
    CHAR            reduce using rule 4 (statement -> declaration .)
    DOUBLE          reduce using rule 4 (statement -> declaration .)
    VOID            reduce using rule 4 (statement -> declaration .)
    SHORT           reduce using rule 4 (statement -> declaration .)
    LONG            reduce using rule 4 (statement -> declaration .)
    LPAREN          reduce using rule 4 (statement -> declaration .)
    HEX_INT         reduce using rule 4 (statement -> declaration .)
    DOT_REAL        reduce using rule 4 (statement -> declaration .)
    EXP_REAL        reduce using rule 4 (statement -> declaration .)
    DEC_INT         reduce using rule 4 (statement -> declaration .)
    CHARACTER       reduce using rule 4 (statement -> declaration .)
    MAIN            reduce using rule 4 (statement -> declaration .)
    INCREMENT       reduce using rule 4 (statement -> declaration .)
    DECREMENT       reduce using rule 4 (statement -> declaration .)
    PRINTF          reduce using rule 4 (statement -> declaration .)
    $end            reduce using rule 4 (statement -> declaration .)
    ELSE            reduce using rule 4 (statement -> declaration .)


state 30

    (67) exp -> VARIABLE .
    (68) exp -> VARIABLE . LBIG exp RBIG
    (70) unary_expression -> VARIABLE . unary_operator
    (72) unary_expression -> VARIABLE . LBIG exp RBIG unary_operator
    (117) function_call -> VARIABLE . lparen arguments rparen
    (118) function_call -> VARIABLE . lparen rparen
    (109) normal_function -> VARIABLE . lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> VARIABLE . lparen parameters rparen lbrace rbrace
    (113) normal_function -> VARIABLE . lparen rparen lbrace statements rbrace
    (114) normal_function -> VARIABLE . lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (122) lparen -> . LPAREN

    SEMI_COLON      reduce using rule 67 (exp -> VARIABLE .)
    ADD             reduce using rule 67 (exp -> VARIABLE .)
    MINUS           reduce using rule 67 (exp -> VARIABLE .)
    MULT            reduce using rule 67 (exp -> VARIABLE .)
    DIV             reduce using rule 67 (exp -> VARIABLE .)
    MOD             reduce using rule 67 (exp -> VARIABLE .)
    L_OP            reduce using rule 67 (exp -> VARIABLE .)
    G_OP            reduce using rule 67 (exp -> VARIABLE .)
    LE_OP           reduce using rule 67 (exp -> VARIABLE .)
    GE_OP           reduce using rule 67 (exp -> VARIABLE .)
    NOTEQUALS       reduce using rule 67 (exp -> VARIABLE .)
    EQUALS_OP       reduce using rule 67 (exp -> VARIABLE .)
    OR_OP           reduce using rule 67 (exp -> VARIABLE .)
    AND_OP          reduce using rule 67 (exp -> VARIABLE .)
    MUL_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    DIV_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    LEFT_ASSIGN     reduce using rule 67 (exp -> VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 67 (exp -> VARIABLE .)
    AND_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    XOR_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    OR_ASSIGN       reduce using rule 67 (exp -> VARIABLE .)
    EQUALS          reduce using rule 67 (exp -> VARIABLE .)
    LBIG            shift and go to state 63
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    LPAREN          shift and go to state 15

    lparen                         shift and go to state 62
    unary_operator                 shift and go to state 64

state 31

    (8) statement -> constant_statement .

    RBRACE          reduce using rule 8 (statement -> constant_statement .)
    COMMENT         reduce using rule 8 (statement -> constant_statement .)
    VARIABLE        reduce using rule 8 (statement -> constant_statement .)
    FOR             reduce using rule 8 (statement -> constant_statement .)
    WHILE           reduce using rule 8 (statement -> constant_statement .)
    DO              reduce using rule 8 (statement -> constant_statement .)
    BREAK           reduce using rule 8 (statement -> constant_statement .)
    CONTINUE        reduce using rule 8 (statement -> constant_statement .)
    RETURN          reduce using rule 8 (statement -> constant_statement .)
    IF              reduce using rule 8 (statement -> constant_statement .)
    INT             reduce using rule 8 (statement -> constant_statement .)
    FLOAT           reduce using rule 8 (statement -> constant_statement .)
    CHAR            reduce using rule 8 (statement -> constant_statement .)
    DOUBLE          reduce using rule 8 (statement -> constant_statement .)
    VOID            reduce using rule 8 (statement -> constant_statement .)
    SHORT           reduce using rule 8 (statement -> constant_statement .)
    LONG            reduce using rule 8 (statement -> constant_statement .)
    LPAREN          reduce using rule 8 (statement -> constant_statement .)
    HEX_INT         reduce using rule 8 (statement -> constant_statement .)
    DOT_REAL        reduce using rule 8 (statement -> constant_statement .)
    EXP_REAL        reduce using rule 8 (statement -> constant_statement .)
    DEC_INT         reduce using rule 8 (statement -> constant_statement .)
    CHARACTER       reduce using rule 8 (statement -> constant_statement .)
    MAIN            reduce using rule 8 (statement -> constant_statement .)
    INCREMENT       reduce using rule 8 (statement -> constant_statement .)
    DECREMENT       reduce using rule 8 (statement -> constant_statement .)
    PRINTF          reduce using rule 8 (statement -> constant_statement .)
    $end            reduce using rule 8 (statement -> constant_statement .)
    ELSE            reduce using rule 8 (statement -> constant_statement .)


state 32

    (64) exp -> unary_expression .

    ADD             reduce using rule 64 (exp -> unary_expression .)
    MINUS           reduce using rule 64 (exp -> unary_expression .)
    MULT            reduce using rule 64 (exp -> unary_expression .)
    DIV             reduce using rule 64 (exp -> unary_expression .)
    MOD             reduce using rule 64 (exp -> unary_expression .)
    L_OP            reduce using rule 64 (exp -> unary_expression .)
    G_OP            reduce using rule 64 (exp -> unary_expression .)
    LE_OP           reduce using rule 64 (exp -> unary_expression .)
    GE_OP           reduce using rule 64 (exp -> unary_expression .)
    NOTEQUALS       reduce using rule 64 (exp -> unary_expression .)
    EQUALS_OP       reduce using rule 64 (exp -> unary_expression .)
    OR_OP           reduce using rule 64 (exp -> unary_expression .)
    AND_OP          reduce using rule 64 (exp -> unary_expression .)
    MUL_ASSIGN      reduce using rule 64 (exp -> unary_expression .)
    DIV_ASSIGN      reduce using rule 64 (exp -> unary_expression .)
    MOD_ASSIGN      reduce using rule 64 (exp -> unary_expression .)
    ADD_ASSIGN      reduce using rule 64 (exp -> unary_expression .)
    SUB_ASSIGN      reduce using rule 64 (exp -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 64 (exp -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 64 (exp -> unary_expression .)
    AND_ASSIGN      reduce using rule 64 (exp -> unary_expression .)
    XOR_ASSIGN      reduce using rule 64 (exp -> unary_expression .)
    OR_ASSIGN       reduce using rule 64 (exp -> unary_expression .)
    EQUALS          reduce using rule 64 (exp -> unary_expression .)
    RPAREN          reduce using rule 64 (exp -> unary_expression .)
    COMMA           reduce using rule 64 (exp -> unary_expression .)
    SEMI_COLON      reduce using rule 64 (exp -> unary_expression .)
    RBIG            reduce using rule 64 (exp -> unary_expression .)
    RBRACE          reduce using rule 64 (exp -> unary_expression .)


state 33

    (75) unary_operator -> DECREMENT .

    VARIABLE        reduce using rule 75 (unary_operator -> DECREMENT .)
    SEMI_COLON      reduce using rule 75 (unary_operator -> DECREMENT .)
    ADD             reduce using rule 75 (unary_operator -> DECREMENT .)
    MINUS           reduce using rule 75 (unary_operator -> DECREMENT .)
    MULT            reduce using rule 75 (unary_operator -> DECREMENT .)
    DIV             reduce using rule 75 (unary_operator -> DECREMENT .)
    MOD             reduce using rule 75 (unary_operator -> DECREMENT .)
    L_OP            reduce using rule 75 (unary_operator -> DECREMENT .)
    G_OP            reduce using rule 75 (unary_operator -> DECREMENT .)
    LE_OP           reduce using rule 75 (unary_operator -> DECREMENT .)
    GE_OP           reduce using rule 75 (unary_operator -> DECREMENT .)
    NOTEQUALS       reduce using rule 75 (unary_operator -> DECREMENT .)
    EQUALS_OP       reduce using rule 75 (unary_operator -> DECREMENT .)
    OR_OP           reduce using rule 75 (unary_operator -> DECREMENT .)
    AND_OP          reduce using rule 75 (unary_operator -> DECREMENT .)
    MUL_ASSIGN      reduce using rule 75 (unary_operator -> DECREMENT .)
    DIV_ASSIGN      reduce using rule 75 (unary_operator -> DECREMENT .)
    MOD_ASSIGN      reduce using rule 75 (unary_operator -> DECREMENT .)
    ADD_ASSIGN      reduce using rule 75 (unary_operator -> DECREMENT .)
    SUB_ASSIGN      reduce using rule 75 (unary_operator -> DECREMENT .)
    LEFT_ASSIGN     reduce using rule 75 (unary_operator -> DECREMENT .)
    RIGHT_ASSIGN    reduce using rule 75 (unary_operator -> DECREMENT .)
    AND_ASSIGN      reduce using rule 75 (unary_operator -> DECREMENT .)
    XOR_ASSIGN      reduce using rule 75 (unary_operator -> DECREMENT .)
    OR_ASSIGN       reduce using rule 75 (unary_operator -> DECREMENT .)
    EQUALS          reduce using rule 75 (unary_operator -> DECREMENT .)
    RPAREN          reduce using rule 75 (unary_operator -> DECREMENT .)
    COMMA           reduce using rule 75 (unary_operator -> DECREMENT .)
    RBIG            reduce using rule 75 (unary_operator -> DECREMENT .)
    RBRACE          reduce using rule 75 (unary_operator -> DECREMENT .)


state 34

    (119) function_call -> print_function .

    ADD             reduce using rule 119 (function_call -> print_function .)
    MINUS           reduce using rule 119 (function_call -> print_function .)
    MULT            reduce using rule 119 (function_call -> print_function .)
    DIV             reduce using rule 119 (function_call -> print_function .)
    MOD             reduce using rule 119 (function_call -> print_function .)
    L_OP            reduce using rule 119 (function_call -> print_function .)
    G_OP            reduce using rule 119 (function_call -> print_function .)
    LE_OP           reduce using rule 119 (function_call -> print_function .)
    GE_OP           reduce using rule 119 (function_call -> print_function .)
    NOTEQUALS       reduce using rule 119 (function_call -> print_function .)
    EQUALS_OP       reduce using rule 119 (function_call -> print_function .)
    OR_OP           reduce using rule 119 (function_call -> print_function .)
    AND_OP          reduce using rule 119 (function_call -> print_function .)
    MUL_ASSIGN      reduce using rule 119 (function_call -> print_function .)
    DIV_ASSIGN      reduce using rule 119 (function_call -> print_function .)
    MOD_ASSIGN      reduce using rule 119 (function_call -> print_function .)
    ADD_ASSIGN      reduce using rule 119 (function_call -> print_function .)
    SUB_ASSIGN      reduce using rule 119 (function_call -> print_function .)
    LEFT_ASSIGN     reduce using rule 119 (function_call -> print_function .)
    RIGHT_ASSIGN    reduce using rule 119 (function_call -> print_function .)
    AND_ASSIGN      reduce using rule 119 (function_call -> print_function .)
    XOR_ASSIGN      reduce using rule 119 (function_call -> print_function .)
    OR_ASSIGN       reduce using rule 119 (function_call -> print_function .)
    EQUALS          reduce using rule 119 (function_call -> print_function .)
    SEMI_COLON      reduce using rule 119 (function_call -> print_function .)
    RPAREN          reduce using rule 119 (function_call -> print_function .)
    COMMA           reduce using rule 119 (function_call -> print_function .)
    RBIG            reduce using rule 119 (function_call -> print_function .)
    RBRACE          reduce using rule 119 (function_call -> print_function .)


state 35

    (90) conditional_statement -> IF . lparen exp rparen statement
    (91) conditional_statement -> IF . lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> IF . lparen exp rparen statement ELSE statement
    (93) conditional_statement -> IF . lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> IF . lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> IF . lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (122) lparen -> . LPAREN

    LPAREN          shift and go to state 15

    lparen                         shift and go to state 65

state 36

    (28) type -> INT .

    VARIABLE        reduce using rule 28 (type -> INT .)
    MAIN            reduce using rule 28 (type -> INT .)


state 37

    (31) type -> DOUBLE .

    VARIABLE        reduce using rule 31 (type -> DOUBLE .)
    MAIN            reduce using rule 31 (type -> DOUBLE .)


state 38

    (35) constant -> HEX_INT .

    SEMI_COLON      reduce using rule 35 (constant -> HEX_INT .)
    ADD             reduce using rule 35 (constant -> HEX_INT .)
    MINUS           reduce using rule 35 (constant -> HEX_INT .)
    MULT            reduce using rule 35 (constant -> HEX_INT .)
    DIV             reduce using rule 35 (constant -> HEX_INT .)
    MOD             reduce using rule 35 (constant -> HEX_INT .)
    L_OP            reduce using rule 35 (constant -> HEX_INT .)
    G_OP            reduce using rule 35 (constant -> HEX_INT .)
    LE_OP           reduce using rule 35 (constant -> HEX_INT .)
    GE_OP           reduce using rule 35 (constant -> HEX_INT .)
    NOTEQUALS       reduce using rule 35 (constant -> HEX_INT .)
    EQUALS_OP       reduce using rule 35 (constant -> HEX_INT .)
    OR_OP           reduce using rule 35 (constant -> HEX_INT .)
    AND_OP          reduce using rule 35 (constant -> HEX_INT .)
    MUL_ASSIGN      reduce using rule 35 (constant -> HEX_INT .)
    DIV_ASSIGN      reduce using rule 35 (constant -> HEX_INT .)
    MOD_ASSIGN      reduce using rule 35 (constant -> HEX_INT .)
    ADD_ASSIGN      reduce using rule 35 (constant -> HEX_INT .)
    SUB_ASSIGN      reduce using rule 35 (constant -> HEX_INT .)
    LEFT_ASSIGN     reduce using rule 35 (constant -> HEX_INT .)
    RIGHT_ASSIGN    reduce using rule 35 (constant -> HEX_INT .)
    AND_ASSIGN      reduce using rule 35 (constant -> HEX_INT .)
    XOR_ASSIGN      reduce using rule 35 (constant -> HEX_INT .)
    OR_ASSIGN       reduce using rule 35 (constant -> HEX_INT .)
    EQUALS          reduce using rule 35 (constant -> HEX_INT .)
    RPAREN          reduce using rule 35 (constant -> HEX_INT .)
    COMMA           reduce using rule 35 (constant -> HEX_INT .)
    RBIG            reduce using rule 35 (constant -> HEX_INT .)
    RBRACE          reduce using rule 35 (constant -> HEX_INT .)


state 39

    (96) function -> normal_function .

    RBRACE          reduce using rule 96 (function -> normal_function .)
    COMMENT         reduce using rule 96 (function -> normal_function .)
    VARIABLE        reduce using rule 96 (function -> normal_function .)
    FOR             reduce using rule 96 (function -> normal_function .)
    WHILE           reduce using rule 96 (function -> normal_function .)
    DO              reduce using rule 96 (function -> normal_function .)
    BREAK           reduce using rule 96 (function -> normal_function .)
    CONTINUE        reduce using rule 96 (function -> normal_function .)
    RETURN          reduce using rule 96 (function -> normal_function .)
    IF              reduce using rule 96 (function -> normal_function .)
    INT             reduce using rule 96 (function -> normal_function .)
    FLOAT           reduce using rule 96 (function -> normal_function .)
    CHAR            reduce using rule 96 (function -> normal_function .)
    DOUBLE          reduce using rule 96 (function -> normal_function .)
    VOID            reduce using rule 96 (function -> normal_function .)
    SHORT           reduce using rule 96 (function -> normal_function .)
    LONG            reduce using rule 96 (function -> normal_function .)
    LPAREN          reduce using rule 96 (function -> normal_function .)
    HEX_INT         reduce using rule 96 (function -> normal_function .)
    DOT_REAL        reduce using rule 96 (function -> normal_function .)
    EXP_REAL        reduce using rule 96 (function -> normal_function .)
    DEC_INT         reduce using rule 96 (function -> normal_function .)
    CHARACTER       reduce using rule 96 (function -> normal_function .)
    MAIN            reduce using rule 96 (function -> normal_function .)
    INCREMENT       reduce using rule 96 (function -> normal_function .)
    DECREMENT       reduce using rule 96 (function -> normal_function .)
    PRINTF          reduce using rule 96 (function -> normal_function .)
    $end            reduce using rule 96 (function -> normal_function .)
    ELSE            reduce using rule 96 (function -> normal_function .)


state 40

    (29) type -> FLOAT .

    VARIABLE        reduce using rule 29 (type -> FLOAT .)
    MAIN            reduce using rule 29 (type -> FLOAT .)


state 41

    (11) constant_statement -> BREAK . SEMI_COLON

    SEMI_COLON      shift and go to state 66


state 42

    (12) constant_statement -> CONTINUE . SEMI_COLON

    SEMI_COLON      shift and go to state 67


state 43

    (5) statement -> exp . SEMI_COLON
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    SEMI_COLON      shift and go to state 71
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81


state 44

    (34) type -> LONG .

    VARIABLE        reduce using rule 34 (type -> LONG .)
    MAIN            reduce using rule 34 (type -> LONG .)


state 45

    (13) constant_statement -> RETURN SEMI_COLON .

    RBRACE          reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    COMMENT         reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    VARIABLE        reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    FOR             reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    WHILE           reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    DO              reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    BREAK           reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    CONTINUE        reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    RETURN          reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    IF              reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    INT             reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    FLOAT           reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    CHAR            reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    DOUBLE          reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    VOID            reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    SHORT           reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    LONG            reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    LPAREN          reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    HEX_INT         reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    DOT_REAL        reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    EXP_REAL        reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    DEC_INT         reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    CHARACTER       reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    MAIN            reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    INCREMENT       reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    DECREMENT       reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    PRINTF          reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    $end            reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)
    ELSE            reduce using rule 13 (constant_statement -> RETURN SEMI_COLON .)


state 46

    (67) exp -> VARIABLE .
    (68) exp -> VARIABLE . LBIG exp RBIG
    (70) unary_expression -> VARIABLE . unary_operator
    (72) unary_expression -> VARIABLE . LBIG exp RBIG unary_operator
    (117) function_call -> VARIABLE . lparen arguments rparen
    (118) function_call -> VARIABLE . lparen rparen
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (122) lparen -> . LPAREN

    ADD             reduce using rule 67 (exp -> VARIABLE .)
    MINUS           reduce using rule 67 (exp -> VARIABLE .)
    MULT            reduce using rule 67 (exp -> VARIABLE .)
    DIV             reduce using rule 67 (exp -> VARIABLE .)
    MOD             reduce using rule 67 (exp -> VARIABLE .)
    L_OP            reduce using rule 67 (exp -> VARIABLE .)
    G_OP            reduce using rule 67 (exp -> VARIABLE .)
    LE_OP           reduce using rule 67 (exp -> VARIABLE .)
    GE_OP           reduce using rule 67 (exp -> VARIABLE .)
    NOTEQUALS       reduce using rule 67 (exp -> VARIABLE .)
    EQUALS_OP       reduce using rule 67 (exp -> VARIABLE .)
    OR_OP           reduce using rule 67 (exp -> VARIABLE .)
    AND_OP          reduce using rule 67 (exp -> VARIABLE .)
    MUL_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    DIV_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    MOD_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    ADD_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    SUB_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    LEFT_ASSIGN     reduce using rule 67 (exp -> VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 67 (exp -> VARIABLE .)
    AND_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    XOR_ASSIGN      reduce using rule 67 (exp -> VARIABLE .)
    OR_ASSIGN       reduce using rule 67 (exp -> VARIABLE .)
    EQUALS          reduce using rule 67 (exp -> VARIABLE .)
    RPAREN          reduce using rule 67 (exp -> VARIABLE .)
    COMMA           reduce using rule 67 (exp -> VARIABLE .)
    SEMI_COLON      reduce using rule 67 (exp -> VARIABLE .)
    RBIG            reduce using rule 67 (exp -> VARIABLE .)
    RBRACE          reduce using rule 67 (exp -> VARIABLE .)
    LBIG            shift and go to state 63
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    LPAREN          shift and go to state 15

    lparen                         shift and go to state 93
    unary_operator                 shift and go to state 64

state 47

    (14) constant_statement -> RETURN exp . SEMI_COLON
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    SEMI_COLON      shift and go to state 94
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81


state 48

    (2) statements -> statements statement .

    RBRACE          reduce using rule 2 (statements -> statements statement .)
    COMMENT         reduce using rule 2 (statements -> statements statement .)
    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    DO              reduce using rule 2 (statements -> statements statement .)
    BREAK           reduce using rule 2 (statements -> statements statement .)
    CONTINUE        reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    INT             reduce using rule 2 (statements -> statements statement .)
    FLOAT           reduce using rule 2 (statements -> statements statement .)
    CHAR            reduce using rule 2 (statements -> statements statement .)
    DOUBLE          reduce using rule 2 (statements -> statements statement .)
    VOID            reduce using rule 2 (statements -> statements statement .)
    SHORT           reduce using rule 2 (statements -> statements statement .)
    LONG            reduce using rule 2 (statements -> statements statement .)
    LPAREN          reduce using rule 2 (statements -> statements statement .)
    HEX_INT         reduce using rule 2 (statements -> statements statement .)
    DOT_REAL        reduce using rule 2 (statements -> statements statement .)
    EXP_REAL        reduce using rule 2 (statements -> statements statement .)
    DEC_INT         reduce using rule 2 (statements -> statements statement .)
    CHARACTER       reduce using rule 2 (statements -> statements statement .)
    MAIN            reduce using rule 2 (statements -> statements statement .)
    INCREMENT       reduce using rule 2 (statements -> statements statement .)
    DECREMENT       reduce using rule 2 (statements -> statements statement .)
    PRINTF          reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 49

    (86) iterative_statement -> DO SEMI_COLON . WHILE lparen exp rparen SEMI_COLON

    WHILE           shift and go to state 95


state 50

    (84) iterative_statement -> DO statement . WHILE lparen exp rparen SEMI_COLON

    WHILE           shift and go to state 96


state 51

    (124) lbrace -> LBRACE .

    COMMENT         reduce using rule 124 (lbrace -> LBRACE .)
    VARIABLE        reduce using rule 124 (lbrace -> LBRACE .)
    FOR             reduce using rule 124 (lbrace -> LBRACE .)
    WHILE           reduce using rule 124 (lbrace -> LBRACE .)
    DO              reduce using rule 124 (lbrace -> LBRACE .)
    BREAK           reduce using rule 124 (lbrace -> LBRACE .)
    CONTINUE        reduce using rule 124 (lbrace -> LBRACE .)
    RETURN          reduce using rule 124 (lbrace -> LBRACE .)
    IF              reduce using rule 124 (lbrace -> LBRACE .)
    INT             reduce using rule 124 (lbrace -> LBRACE .)
    FLOAT           reduce using rule 124 (lbrace -> LBRACE .)
    CHAR            reduce using rule 124 (lbrace -> LBRACE .)
    DOUBLE          reduce using rule 124 (lbrace -> LBRACE .)
    VOID            reduce using rule 124 (lbrace -> LBRACE .)
    SHORT           reduce using rule 124 (lbrace -> LBRACE .)
    LONG            reduce using rule 124 (lbrace -> LBRACE .)
    LPAREN          reduce using rule 124 (lbrace -> LBRACE .)
    HEX_INT         reduce using rule 124 (lbrace -> LBRACE .)
    DOT_REAL        reduce using rule 124 (lbrace -> LBRACE .)
    EXP_REAL        reduce using rule 124 (lbrace -> LBRACE .)
    DEC_INT         reduce using rule 124 (lbrace -> LBRACE .)
    CHARACTER       reduce using rule 124 (lbrace -> LBRACE .)
    MAIN            reduce using rule 124 (lbrace -> LBRACE .)
    INCREMENT       reduce using rule 124 (lbrace -> LBRACE .)
    DECREMENT       reduce using rule 124 (lbrace -> LBRACE .)
    PRINTF          reduce using rule 124 (lbrace -> LBRACE .)
    RBRACE          reduce using rule 124 (lbrace -> LBRACE .)


state 52

    (85) iterative_statement -> DO lbrace . statements rbrace WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> DO lbrace . rbrace WHILE lparen exp rparen SEMI_COLON
    (2) statements -> . statements statement
    (3) statements -> . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 97
    rbrace                         shift and go to state 98
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    constant_statement             shift and go to state 31
    print_function                 shift and go to state 34
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 53

    (98) print_function -> PRINTF lparen . exp rparen
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    lparen                         shift and go to state 28
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    exp                            shift and go to state 100
    unary_operator                 shift and go to state 24

state 54

    (80) iterative_statement -> WHILE lparen . exp rparen statement
    (81) iterative_statement -> WHILE lparen . exp rparen SEMI_COLON
    (82) iterative_statement -> WHILE lparen . exp rparen lbrace statements rbrace
    (83) iterative_statement -> WHILE lparen . exp rparen lbrace rbrace
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    lparen                         shift and go to state 28
    exp                            shift and go to state 101
    unary_expression               shift and go to state 32
    print_function                 shift and go to state 34
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    unary_operator                 shift and go to state 24

state 55

    (101) main_function -> MAIN lparen . parameters rparen lbrace statements rbrace
    (102) main_function -> MAIN lparen . parameters rparen lbrace rbrace
    (105) main_function -> MAIN lparen . rparen lbrace statements rbrace
    (106) main_function -> MAIN lparen . rparen lbrace rbrace
    (115) parameters -> . type VARIABLE COMMA parameters
    (116) parameters -> . type VARIABLE
    (123) rparen -> . RPAREN
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG

    RPAREN          shift and go to state 105
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44

    parameters                     shift and go to state 102
    rparen                         shift and go to state 103
    type                           shift and go to state 104

state 56

    (15) declaration -> type enum_list . SEMI_COLON

    SEMI_COLON      shift and go to state 106


state 57

    (16) declaration -> type VARIABLE . lparen parameters rparen SEMI_COLON
    (17) declaration -> type VARIABLE . lparen rparen SEMI_COLON
    (107) normal_function -> type VARIABLE . lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> type VARIABLE . lparen parameters rparen lbrace rbrace
    (111) normal_function -> type VARIABLE . lparen rparen lbrace statements rbrace
    (112) normal_function -> type VARIABLE . lparen rparen lbrace rbrace
    (18) enum_list -> VARIABLE . COMMA enum_list
    (19) enum_list -> VARIABLE . EQUALS exp COMMA enum_list
    (20) enum_list -> VARIABLE .
    (21) enum_list -> VARIABLE . EQUALS exp
    (22) enum_list -> VARIABLE . LBIG exp RBIG COMMA enum_list
    (23) enum_list -> VARIABLE . LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (24) enum_list -> VARIABLE . LBIG exp RBIG
    (25) enum_list -> VARIABLE . LBIG exp RBIG EQUALS LBRACE num_list RBRACE
    (122) lparen -> . LPAREN

    COMMA           shift and go to state 109
    EQUALS          shift and go to state 107
    SEMI_COLON      reduce using rule 20 (enum_list -> VARIABLE .)
    LBIG            shift and go to state 108
    LPAREN          shift and go to state 15

    lparen                         shift and go to state 110

state 58

    (99) main_function -> type MAIN . lparen parameters rparen lbrace statements rbrace
    (100) main_function -> type MAIN . lparen parameters rparen lbrace rbrace
    (103) main_function -> type MAIN . lparen rparen lbrace statements rbrace
    (104) main_function -> type MAIN . lparen rparen lbrace rbrace
    (122) lparen -> . LPAREN

    LPAREN          shift and go to state 15

    lparen                         shift and go to state 111

state 59

    (71) unary_expression -> unary_operator VARIABLE .
    (73) unary_expression -> unary_operator VARIABLE . LBIG exp RBIG

    SEMI_COLON      reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    ADD             reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    MINUS           reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    MULT            reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    DIV             reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    MOD             reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    L_OP            reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    G_OP            reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    LE_OP           reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    GE_OP           reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    NOTEQUALS       reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    EQUALS_OP       reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    OR_OP           reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    AND_OP          reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    MUL_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    DIV_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    MOD_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    ADD_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    SUB_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    LEFT_ASSIGN     reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    RIGHT_ASSIGN    reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    AND_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    XOR_ASSIGN      reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    OR_ASSIGN       reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    EQUALS          reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    RPAREN          reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    COMMA           reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    RBIG            reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    RBRACE          reduce using rule 71 (unary_expression -> unary_operator VARIABLE .)
    LBIG            shift and go to state 112


state 60

    (76) iterative_statement -> FOR lparen . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> FOR lparen . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> FOR lparen . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> FOR lparen . iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (88) iterative_exp -> . exp COMMA iterative_exp
    (89) iterative_exp -> . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    exp                            shift and go to state 114
    lparen                         shift and go to state 28
    unary_expression               shift and go to state 32
    iterative_exp                  shift and go to state 113
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    unary_operator                 shift and go to state 24

state 61

    (65) exp -> lparen exp . rparen
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp
    (123) rparen -> . RPAREN

    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81
    RPAREN          shift and go to state 105

    rparen                         shift and go to state 115

state 62

    (117) function_call -> VARIABLE lparen . arguments rparen
    (118) function_call -> VARIABLE lparen . rparen
    (109) normal_function -> VARIABLE lparen . parameters rparen lbrace statements rbrace
    (110) normal_function -> VARIABLE lparen . parameters rparen lbrace rbrace
    (113) normal_function -> VARIABLE lparen . rparen lbrace statements rbrace
    (114) normal_function -> VARIABLE lparen . rparen lbrace rbrace
    (120) arguments -> . arguments COMMA exp
    (121) arguments -> . exp
    (123) rparen -> . RPAREN
    (115) parameters -> . type VARIABLE COMMA parameters
    (116) parameters -> . type VARIABLE
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RPAREN          shift and go to state 105
    VARIABLE        shift and go to state 46
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    exp                            shift and go to state 119
    parameters                     shift and go to state 116
    unary_expression               shift and go to state 32
    arguments                      shift and go to state 117
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24
    rparen                         shift and go to state 118
    constant                       shift and go to state 12
    type                           shift and go to state 104
    function_call                  shift and go to state 8

state 63

    (68) exp -> VARIABLE LBIG . exp RBIG
    (72) unary_expression -> VARIABLE LBIG . exp RBIG unary_operator
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    exp                            shift and go to state 120
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    constant                       shift and go to state 12
    unary_operator                 shift and go to state 24

state 64

    (70) unary_expression -> VARIABLE unary_operator .

    SEMI_COLON      reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    ADD             reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    MINUS           reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    MULT            reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    DIV             reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    MOD             reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    L_OP            reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    G_OP            reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    LE_OP           reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    GE_OP           reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    NOTEQUALS       reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    EQUALS_OP       reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    OR_OP           reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    AND_OP          reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    MUL_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    DIV_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    MOD_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    ADD_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    SUB_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    LEFT_ASSIGN     reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    RIGHT_ASSIGN    reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    AND_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    XOR_ASSIGN      reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    OR_ASSIGN       reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    EQUALS          reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    RPAREN          reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    COMMA           reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    RBIG            reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)
    RBRACE          reduce using rule 70 (unary_expression -> VARIABLE unary_operator .)


state 65

    (90) conditional_statement -> IF lparen . exp rparen statement
    (91) conditional_statement -> IF lparen . exp rparen lbrace statements rbrace
    (92) conditional_statement -> IF lparen . exp rparen statement ELSE statement
    (93) conditional_statement -> IF lparen . exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> IF lparen . exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> IF lparen . exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    lparen                         shift and go to state 28
    exp                            shift and go to state 121
    unary_expression               shift and go to state 32
    print_function                 shift and go to state 34
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    unary_operator                 shift and go to state 24

state 66

    (11) constant_statement -> BREAK SEMI_COLON .

    RBRACE          reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    COMMENT         reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    VARIABLE        reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    FOR             reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    WHILE           reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    DO              reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    BREAK           reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    CONTINUE        reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    RETURN          reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    IF              reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    INT             reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    FLOAT           reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    CHAR            reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    DOUBLE          reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    VOID            reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    SHORT           reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    LONG            reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    LPAREN          reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    HEX_INT         reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    DOT_REAL        reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    EXP_REAL        reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    DEC_INT         reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    CHARACTER       reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    MAIN            reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    INCREMENT       reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    DECREMENT       reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    PRINTF          reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    $end            reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)
    ELSE            reduce using rule 11 (constant_statement -> BREAK SEMI_COLON .)


state 67

    (12) constant_statement -> CONTINUE SEMI_COLON .

    RBRACE          reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    COMMENT         reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    VARIABLE        reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    FOR             reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    WHILE           reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    DO              reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    BREAK           reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    CONTINUE        reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    RETURN          reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    IF              reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    INT             reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    FLOAT           reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    CHAR            reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    DOUBLE          reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    VOID            reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    SHORT           reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    LONG            reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    LPAREN          reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    HEX_INT         reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    DOT_REAL        reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    EXP_REAL        reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    DEC_INT         reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    CHARACTER       reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    MAIN            reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    INCREMENT       reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    DECREMENT       reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    PRINTF          reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    $end            reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)
    ELSE            reduce using rule 12 (constant_statement -> CONTINUE SEMI_COLON .)


state 68

    (49) exp -> exp NOTEQUALS . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 122
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 69

    (50) exp -> exp EQUALS_OP . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 123
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 70

    (54) exp -> exp DIV_ASSIGN . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 124
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 71

    (5) statement -> exp SEMI_COLON .

    RBRACE          reduce using rule 5 (statement -> exp SEMI_COLON .)
    COMMENT         reduce using rule 5 (statement -> exp SEMI_COLON .)
    VARIABLE        reduce using rule 5 (statement -> exp SEMI_COLON .)
    FOR             reduce using rule 5 (statement -> exp SEMI_COLON .)
    WHILE           reduce using rule 5 (statement -> exp SEMI_COLON .)
    DO              reduce using rule 5 (statement -> exp SEMI_COLON .)
    BREAK           reduce using rule 5 (statement -> exp SEMI_COLON .)
    CONTINUE        reduce using rule 5 (statement -> exp SEMI_COLON .)
    RETURN          reduce using rule 5 (statement -> exp SEMI_COLON .)
    IF              reduce using rule 5 (statement -> exp SEMI_COLON .)
    INT             reduce using rule 5 (statement -> exp SEMI_COLON .)
    FLOAT           reduce using rule 5 (statement -> exp SEMI_COLON .)
    CHAR            reduce using rule 5 (statement -> exp SEMI_COLON .)
    DOUBLE          reduce using rule 5 (statement -> exp SEMI_COLON .)
    VOID            reduce using rule 5 (statement -> exp SEMI_COLON .)
    SHORT           reduce using rule 5 (statement -> exp SEMI_COLON .)
    LONG            reduce using rule 5 (statement -> exp SEMI_COLON .)
    LPAREN          reduce using rule 5 (statement -> exp SEMI_COLON .)
    HEX_INT         reduce using rule 5 (statement -> exp SEMI_COLON .)
    DOT_REAL        reduce using rule 5 (statement -> exp SEMI_COLON .)
    EXP_REAL        reduce using rule 5 (statement -> exp SEMI_COLON .)
    DEC_INT         reduce using rule 5 (statement -> exp SEMI_COLON .)
    CHARACTER       reduce using rule 5 (statement -> exp SEMI_COLON .)
    MAIN            reduce using rule 5 (statement -> exp SEMI_COLON .)
    INCREMENT       reduce using rule 5 (statement -> exp SEMI_COLON .)
    DECREMENT       reduce using rule 5 (statement -> exp SEMI_COLON .)
    PRINTF          reduce using rule 5 (statement -> exp SEMI_COLON .)
    $end            reduce using rule 5 (statement -> exp SEMI_COLON .)
    ELSE            reduce using rule 5 (statement -> exp SEMI_COLON .)


state 72

    (43) exp -> exp DIV . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 125
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 73

    (41) exp -> exp MINUS . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 126
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 74

    (42) exp -> exp MULT . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 127
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 75

    (47) exp -> exp LE_OP . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 128
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 76

    (59) exp -> exp RIGHT_ASSIGN . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 129
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 77

    (46) exp -> exp G_OP . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 130
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 78

    (51) exp -> exp OR_OP . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 131
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 79

    (60) exp -> exp AND_ASSIGN . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 132
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 80

    (56) exp -> exp ADD_ASSIGN . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 133
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 81

    (63) exp -> exp EQUALS . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 134
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 82

    (52) exp -> exp AND_OP . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 135
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 83

    (40) exp -> exp ADD . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 136
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 84

    (48) exp -> exp GE_OP . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 137
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 85

    (57) exp -> exp SUB_ASSIGN . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 138
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 86

    (55) exp -> exp MOD_ASSIGN . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 139
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 87

    (61) exp -> exp XOR_ASSIGN . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 140
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 88

    (62) exp -> exp OR_ASSIGN . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 141
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 89

    (45) exp -> exp L_OP . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 142
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 90

    (53) exp -> exp MUL_ASSIGN . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 143
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 91

    (58) exp -> exp LEFT_ASSIGN . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 144
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 92

    (44) exp -> exp MOD . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 145
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 93

    (117) function_call -> VARIABLE lparen . arguments rparen
    (118) function_call -> VARIABLE lparen . rparen
    (120) arguments -> . arguments COMMA exp
    (121) arguments -> . exp
    (123) rparen -> . RPAREN
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RPAREN          shift and go to state 105
    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    lparen                         shift and go to state 28
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    arguments                      shift and go to state 117
    exp                            shift and go to state 119
    rparen                         shift and go to state 146
    unary_operator                 shift and go to state 24

state 94

    (14) constant_statement -> RETURN exp SEMI_COLON .

    RBRACE          reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    COMMENT         reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    VARIABLE        reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    FOR             reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    WHILE           reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    DO              reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    BREAK           reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    CONTINUE        reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    RETURN          reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    IF              reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    INT             reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    FLOAT           reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    CHAR            reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    DOUBLE          reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    VOID            reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    SHORT           reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    LONG            reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    LPAREN          reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    HEX_INT         reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    DOT_REAL        reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    EXP_REAL        reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    DEC_INT         reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    CHARACTER       reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    MAIN            reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    INCREMENT       reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    DECREMENT       reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    PRINTF          reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    $end            reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)
    ELSE            reduce using rule 14 (constant_statement -> RETURN exp SEMI_COLON .)


state 95

    (86) iterative_statement -> DO SEMI_COLON WHILE . lparen exp rparen SEMI_COLON
    (122) lparen -> . LPAREN

    LPAREN          shift and go to state 15

    lparen                         shift and go to state 147

state 96

    (84) iterative_statement -> DO statement WHILE . lparen exp rparen SEMI_COLON
    (122) lparen -> . LPAREN

    LPAREN          shift and go to state 15

    lparen                         shift and go to state 148

state 97

    (85) iterative_statement -> DO lbrace statements . rbrace WHILE lparen exp rparen SEMI_COLON
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 149
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    constant_statement             shift and go to state 31
    print_function                 shift and go to state 34
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 98

    (87) iterative_statement -> DO lbrace rbrace . WHILE lparen exp rparen SEMI_COLON

    WHILE           shift and go to state 150


state 99

    (125) rbrace -> RBRACE .

    COMMENT         reduce using rule 125 (rbrace -> RBRACE .)
    VARIABLE        reduce using rule 125 (rbrace -> RBRACE .)
    FOR             reduce using rule 125 (rbrace -> RBRACE .)
    WHILE           reduce using rule 125 (rbrace -> RBRACE .)
    DO              reduce using rule 125 (rbrace -> RBRACE .)
    BREAK           reduce using rule 125 (rbrace -> RBRACE .)
    CONTINUE        reduce using rule 125 (rbrace -> RBRACE .)
    RETURN          reduce using rule 125 (rbrace -> RBRACE .)
    IF              reduce using rule 125 (rbrace -> RBRACE .)
    INT             reduce using rule 125 (rbrace -> RBRACE .)
    FLOAT           reduce using rule 125 (rbrace -> RBRACE .)
    CHAR            reduce using rule 125 (rbrace -> RBRACE .)
    DOUBLE          reduce using rule 125 (rbrace -> RBRACE .)
    VOID            reduce using rule 125 (rbrace -> RBRACE .)
    SHORT           reduce using rule 125 (rbrace -> RBRACE .)
    LONG            reduce using rule 125 (rbrace -> RBRACE .)
    LPAREN          reduce using rule 125 (rbrace -> RBRACE .)
    HEX_INT         reduce using rule 125 (rbrace -> RBRACE .)
    DOT_REAL        reduce using rule 125 (rbrace -> RBRACE .)
    EXP_REAL        reduce using rule 125 (rbrace -> RBRACE .)
    DEC_INT         reduce using rule 125 (rbrace -> RBRACE .)
    CHARACTER       reduce using rule 125 (rbrace -> RBRACE .)
    MAIN            reduce using rule 125 (rbrace -> RBRACE .)
    INCREMENT       reduce using rule 125 (rbrace -> RBRACE .)
    DECREMENT       reduce using rule 125 (rbrace -> RBRACE .)
    PRINTF          reduce using rule 125 (rbrace -> RBRACE .)
    $end            reduce using rule 125 (rbrace -> RBRACE .)
    RBRACE          reduce using rule 125 (rbrace -> RBRACE .)
    ELSE            reduce using rule 125 (rbrace -> RBRACE .)


state 100

    (98) print_function -> PRINTF lparen exp . rparen
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp
    (123) rparen -> . RPAREN

    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81
    RPAREN          shift and go to state 105

    rparen                         shift and go to state 151

state 101

    (80) iterative_statement -> WHILE lparen exp . rparen statement
    (81) iterative_statement -> WHILE lparen exp . rparen SEMI_COLON
    (82) iterative_statement -> WHILE lparen exp . rparen lbrace statements rbrace
    (83) iterative_statement -> WHILE lparen exp . rparen lbrace rbrace
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp
    (123) rparen -> . RPAREN

    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81
    RPAREN          shift and go to state 105

    rparen                         shift and go to state 152

state 102

    (101) main_function -> MAIN lparen parameters . rparen lbrace statements rbrace
    (102) main_function -> MAIN lparen parameters . rparen lbrace rbrace
    (123) rparen -> . RPAREN

    RPAREN          shift and go to state 105

    rparen                         shift and go to state 153

state 103

    (105) main_function -> MAIN lparen rparen . lbrace statements rbrace
    (106) main_function -> MAIN lparen rparen . lbrace rbrace
    (124) lbrace -> . LBRACE

    LBRACE          shift and go to state 51

    lbrace                         shift and go to state 154

state 104

    (115) parameters -> type . VARIABLE COMMA parameters
    (116) parameters -> type . VARIABLE

    VARIABLE        shift and go to state 155


state 105

    (123) rparen -> RPAREN .

    LBRACE          reduce using rule 123 (rparen -> RPAREN .)
    SEMI_COLON      reduce using rule 123 (rparen -> RPAREN .)
    ADD             reduce using rule 123 (rparen -> RPAREN .)
    MINUS           reduce using rule 123 (rparen -> RPAREN .)
    MULT            reduce using rule 123 (rparen -> RPAREN .)
    DIV             reduce using rule 123 (rparen -> RPAREN .)
    MOD             reduce using rule 123 (rparen -> RPAREN .)
    L_OP            reduce using rule 123 (rparen -> RPAREN .)
    G_OP            reduce using rule 123 (rparen -> RPAREN .)
    LE_OP           reduce using rule 123 (rparen -> RPAREN .)
    GE_OP           reduce using rule 123 (rparen -> RPAREN .)
    NOTEQUALS       reduce using rule 123 (rparen -> RPAREN .)
    EQUALS_OP       reduce using rule 123 (rparen -> RPAREN .)
    OR_OP           reduce using rule 123 (rparen -> RPAREN .)
    AND_OP          reduce using rule 123 (rparen -> RPAREN .)
    MUL_ASSIGN      reduce using rule 123 (rparen -> RPAREN .)
    DIV_ASSIGN      reduce using rule 123 (rparen -> RPAREN .)
    MOD_ASSIGN      reduce using rule 123 (rparen -> RPAREN .)
    ADD_ASSIGN      reduce using rule 123 (rparen -> RPAREN .)
    SUB_ASSIGN      reduce using rule 123 (rparen -> RPAREN .)
    LEFT_ASSIGN     reduce using rule 123 (rparen -> RPAREN .)
    RIGHT_ASSIGN    reduce using rule 123 (rparen -> RPAREN .)
    AND_ASSIGN      reduce using rule 123 (rparen -> RPAREN .)
    XOR_ASSIGN      reduce using rule 123 (rparen -> RPAREN .)
    OR_ASSIGN       reduce using rule 123 (rparen -> RPAREN .)
    EQUALS          reduce using rule 123 (rparen -> RPAREN .)
    RPAREN          reduce using rule 123 (rparen -> RPAREN .)
    COMMA           reduce using rule 123 (rparen -> RPAREN .)
    RBIG            reduce using rule 123 (rparen -> RPAREN .)
    RBRACE          reduce using rule 123 (rparen -> RPAREN .)
    COMMENT         reduce using rule 123 (rparen -> RPAREN .)
    VARIABLE        reduce using rule 123 (rparen -> RPAREN .)
    FOR             reduce using rule 123 (rparen -> RPAREN .)
    WHILE           reduce using rule 123 (rparen -> RPAREN .)
    DO              reduce using rule 123 (rparen -> RPAREN .)
    BREAK           reduce using rule 123 (rparen -> RPAREN .)
    CONTINUE        reduce using rule 123 (rparen -> RPAREN .)
    RETURN          reduce using rule 123 (rparen -> RPAREN .)
    IF              reduce using rule 123 (rparen -> RPAREN .)
    INT             reduce using rule 123 (rparen -> RPAREN .)
    FLOAT           reduce using rule 123 (rparen -> RPAREN .)
    CHAR            reduce using rule 123 (rparen -> RPAREN .)
    DOUBLE          reduce using rule 123 (rparen -> RPAREN .)
    VOID            reduce using rule 123 (rparen -> RPAREN .)
    SHORT           reduce using rule 123 (rparen -> RPAREN .)
    LONG            reduce using rule 123 (rparen -> RPAREN .)
    LPAREN          reduce using rule 123 (rparen -> RPAREN .)
    HEX_INT         reduce using rule 123 (rparen -> RPAREN .)
    DOT_REAL        reduce using rule 123 (rparen -> RPAREN .)
    EXP_REAL        reduce using rule 123 (rparen -> RPAREN .)
    DEC_INT         reduce using rule 123 (rparen -> RPAREN .)
    CHARACTER       reduce using rule 123 (rparen -> RPAREN .)
    MAIN            reduce using rule 123 (rparen -> RPAREN .)
    INCREMENT       reduce using rule 123 (rparen -> RPAREN .)
    DECREMENT       reduce using rule 123 (rparen -> RPAREN .)
    PRINTF          reduce using rule 123 (rparen -> RPAREN .)


state 106

    (15) declaration -> type enum_list SEMI_COLON .

    RBRACE          reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    COMMENT         reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    VARIABLE        reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    FOR             reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    WHILE           reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    DO              reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    BREAK           reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    CONTINUE        reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    RETURN          reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    IF              reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    INT             reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    FLOAT           reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    CHAR            reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    DOUBLE          reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    VOID            reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    SHORT           reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    LONG            reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    LPAREN          reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    HEX_INT         reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    DOT_REAL        reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    EXP_REAL        reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    DEC_INT         reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    CHARACTER       reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    MAIN            reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    INCREMENT       reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    DECREMENT       reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    PRINTF          reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    $end            reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)
    ELSE            reduce using rule 15 (declaration -> type enum_list SEMI_COLON .)


state 107

    (19) enum_list -> VARIABLE EQUALS . exp COMMA enum_list
    (21) enum_list -> VARIABLE EQUALS . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 156
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    unary_operator                 shift and go to state 24

state 108

    (22) enum_list -> VARIABLE LBIG . exp RBIG COMMA enum_list
    (23) enum_list -> VARIABLE LBIG . exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (24) enum_list -> VARIABLE LBIG . exp RBIG
    (25) enum_list -> VARIABLE LBIG . exp RBIG EQUALS LBRACE num_list RBRACE
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    exp                            shift and go to state 157
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    constant                       shift and go to state 12
    unary_operator                 shift and go to state 24

state 109

    (18) enum_list -> VARIABLE COMMA . enum_list
    (18) enum_list -> . VARIABLE COMMA enum_list
    (19) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (20) enum_list -> . VARIABLE
    (21) enum_list -> . VARIABLE EQUALS exp
    (22) enum_list -> . VARIABLE LBIG exp RBIG COMMA enum_list
    (23) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (24) enum_list -> . VARIABLE LBIG exp RBIG
    (25) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    VARIABLE        shift and go to state 159

    enum_list                      shift and go to state 158

state 110

    (16) declaration -> type VARIABLE lparen . parameters rparen SEMI_COLON
    (17) declaration -> type VARIABLE lparen . rparen SEMI_COLON
    (107) normal_function -> type VARIABLE lparen . parameters rparen lbrace statements rbrace
    (108) normal_function -> type VARIABLE lparen . parameters rparen lbrace rbrace
    (111) normal_function -> type VARIABLE lparen . rparen lbrace statements rbrace
    (112) normal_function -> type VARIABLE lparen . rparen lbrace rbrace
    (115) parameters -> . type VARIABLE COMMA parameters
    (116) parameters -> . type VARIABLE
    (123) rparen -> . RPAREN
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG

    RPAREN          shift and go to state 105
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44

    parameters                     shift and go to state 161
    rparen                         shift and go to state 160
    type                           shift and go to state 104

state 111

    (99) main_function -> type MAIN lparen . parameters rparen lbrace statements rbrace
    (100) main_function -> type MAIN lparen . parameters rparen lbrace rbrace
    (103) main_function -> type MAIN lparen . rparen lbrace statements rbrace
    (104) main_function -> type MAIN lparen . rparen lbrace rbrace
    (115) parameters -> . type VARIABLE COMMA parameters
    (116) parameters -> . type VARIABLE
    (123) rparen -> . RPAREN
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG

    RPAREN          shift and go to state 105
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44

    parameters                     shift and go to state 163
    rparen                         shift and go to state 162
    type                           shift and go to state 104

state 112

    (73) unary_expression -> unary_operator VARIABLE LBIG . exp RBIG
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    exp                            shift and go to state 164
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    constant                       shift and go to state 12
    unary_operator                 shift and go to state 24

state 113

    (76) iterative_statement -> FOR lparen iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> FOR lparen iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> FOR lparen iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> FOR lparen iterative_exp . SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace

    SEMI_COLON      shift and go to state 165


state 114

    (88) iterative_exp -> exp . COMMA iterative_exp
    (89) iterative_exp -> exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    COMMA           shift and go to state 166
    SEMI_COLON      reduce using rule 89 (iterative_exp -> exp .)
    RPAREN          reduce using rule 89 (iterative_exp -> exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81


state 115

    (65) exp -> lparen exp rparen .

    ADD             reduce using rule 65 (exp -> lparen exp rparen .)
    MINUS           reduce using rule 65 (exp -> lparen exp rparen .)
    MULT            reduce using rule 65 (exp -> lparen exp rparen .)
    DIV             reduce using rule 65 (exp -> lparen exp rparen .)
    MOD             reduce using rule 65 (exp -> lparen exp rparen .)
    L_OP            reduce using rule 65 (exp -> lparen exp rparen .)
    G_OP            reduce using rule 65 (exp -> lparen exp rparen .)
    LE_OP           reduce using rule 65 (exp -> lparen exp rparen .)
    GE_OP           reduce using rule 65 (exp -> lparen exp rparen .)
    NOTEQUALS       reduce using rule 65 (exp -> lparen exp rparen .)
    EQUALS_OP       reduce using rule 65 (exp -> lparen exp rparen .)
    OR_OP           reduce using rule 65 (exp -> lparen exp rparen .)
    AND_OP          reduce using rule 65 (exp -> lparen exp rparen .)
    MUL_ASSIGN      reduce using rule 65 (exp -> lparen exp rparen .)
    DIV_ASSIGN      reduce using rule 65 (exp -> lparen exp rparen .)
    MOD_ASSIGN      reduce using rule 65 (exp -> lparen exp rparen .)
    ADD_ASSIGN      reduce using rule 65 (exp -> lparen exp rparen .)
    SUB_ASSIGN      reduce using rule 65 (exp -> lparen exp rparen .)
    LEFT_ASSIGN     reduce using rule 65 (exp -> lparen exp rparen .)
    RIGHT_ASSIGN    reduce using rule 65 (exp -> lparen exp rparen .)
    AND_ASSIGN      reduce using rule 65 (exp -> lparen exp rparen .)
    XOR_ASSIGN      reduce using rule 65 (exp -> lparen exp rparen .)
    OR_ASSIGN       reduce using rule 65 (exp -> lparen exp rparen .)
    EQUALS          reduce using rule 65 (exp -> lparen exp rparen .)
    RPAREN          reduce using rule 65 (exp -> lparen exp rparen .)
    COMMA           reduce using rule 65 (exp -> lparen exp rparen .)
    SEMI_COLON      reduce using rule 65 (exp -> lparen exp rparen .)
    RBIG            reduce using rule 65 (exp -> lparen exp rparen .)
    RBRACE          reduce using rule 65 (exp -> lparen exp rparen .)


state 116

    (109) normal_function -> VARIABLE lparen parameters . rparen lbrace statements rbrace
    (110) normal_function -> VARIABLE lparen parameters . rparen lbrace rbrace
    (123) rparen -> . RPAREN

    RPAREN          shift and go to state 105

    rparen                         shift and go to state 167

state 117

    (117) function_call -> VARIABLE lparen arguments . rparen
    (120) arguments -> arguments . COMMA exp
    (123) rparen -> . RPAREN

    COMMA           shift and go to state 169
    RPAREN          shift and go to state 105

    rparen                         shift and go to state 168

state 118

    (118) function_call -> VARIABLE lparen rparen .
    (113) normal_function -> VARIABLE lparen rparen . lbrace statements rbrace
    (114) normal_function -> VARIABLE lparen rparen . lbrace rbrace
    (124) lbrace -> . LBRACE

    SEMI_COLON      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    ADD             reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    MINUS           reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    MULT            reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    DIV             reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    MOD             reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    L_OP            reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    G_OP            reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    LE_OP           reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    GE_OP           reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    NOTEQUALS       reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    EQUALS_OP       reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    OR_OP           reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    AND_OP          reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    MUL_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    DIV_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    MOD_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    ADD_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    SUB_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    LEFT_ASSIGN     reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    RIGHT_ASSIGN    reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    AND_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    XOR_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    OR_ASSIGN       reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    EQUALS          reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    LBRACE          shift and go to state 51

    lbrace                         shift and go to state 170

state 119

    (121) arguments -> exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    COMMA           reduce using rule 121 (arguments -> exp .)
    RPAREN          reduce using rule 121 (arguments -> exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81


state 120

    (68) exp -> VARIABLE LBIG exp . RBIG
    (72) unary_expression -> VARIABLE LBIG exp . RBIG unary_operator
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RBIG            shift and go to state 171
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81


state 121

    (90) conditional_statement -> IF lparen exp . rparen statement
    (91) conditional_statement -> IF lparen exp . rparen lbrace statements rbrace
    (92) conditional_statement -> IF lparen exp . rparen statement ELSE statement
    (93) conditional_statement -> IF lparen exp . rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> IF lparen exp . rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> IF lparen exp . rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp
    (123) rparen -> . RPAREN

    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81
    RPAREN          shift and go to state 105

    rparen                         shift and go to state 172

state 122

    (49) exp -> exp NOTEQUALS exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    NOTEQUALS       reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    EQUALS_OP       reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    OR_OP           reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    AND_OP          reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    MUL_ASSIGN      reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    DIV_ASSIGN      reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    MOD_ASSIGN      reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    ADD_ASSIGN      reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    SUB_ASSIGN      reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    LEFT_ASSIGN     reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    RIGHT_ASSIGN    reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    AND_ASSIGN      reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    XOR_ASSIGN      reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    OR_ASSIGN       reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    EQUALS          reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    RPAREN          reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    COMMA           reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    SEMI_COLON      reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    RBIG            reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    RBRACE          reduce using rule 49 (exp -> exp NOTEQUALS exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84

  ! ADD             [ reduce using rule 49 (exp -> exp NOTEQUALS exp .) ]
  ! MINUS           [ reduce using rule 49 (exp -> exp NOTEQUALS exp .) ]
  ! MULT            [ reduce using rule 49 (exp -> exp NOTEQUALS exp .) ]
  ! DIV             [ reduce using rule 49 (exp -> exp NOTEQUALS exp .) ]
  ! MOD             [ reduce using rule 49 (exp -> exp NOTEQUALS exp .) ]
  ! L_OP            [ reduce using rule 49 (exp -> exp NOTEQUALS exp .) ]
  ! G_OP            [ reduce using rule 49 (exp -> exp NOTEQUALS exp .) ]
  ! LE_OP           [ reduce using rule 49 (exp -> exp NOTEQUALS exp .) ]
  ! GE_OP           [ reduce using rule 49 (exp -> exp NOTEQUALS exp .) ]
  ! NOTEQUALS       [ shift and go to state 68 ]
  ! EQUALS_OP       [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 123

    (50) exp -> exp EQUALS_OP exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    NOTEQUALS       reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    EQUALS_OP       reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    OR_OP           reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    AND_OP          reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    MUL_ASSIGN      reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    DIV_ASSIGN      reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    MOD_ASSIGN      reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    ADD_ASSIGN      reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    SUB_ASSIGN      reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    LEFT_ASSIGN     reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    RIGHT_ASSIGN    reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    AND_ASSIGN      reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    XOR_ASSIGN      reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    OR_ASSIGN       reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    EQUALS          reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    RPAREN          reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    COMMA           reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    SEMI_COLON      reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    RBIG            reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    RBRACE          reduce using rule 50 (exp -> exp EQUALS_OP exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84

  ! ADD             [ reduce using rule 50 (exp -> exp EQUALS_OP exp .) ]
  ! MINUS           [ reduce using rule 50 (exp -> exp EQUALS_OP exp .) ]
  ! MULT            [ reduce using rule 50 (exp -> exp EQUALS_OP exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> exp EQUALS_OP exp .) ]
  ! MOD             [ reduce using rule 50 (exp -> exp EQUALS_OP exp .) ]
  ! L_OP            [ reduce using rule 50 (exp -> exp EQUALS_OP exp .) ]
  ! G_OP            [ reduce using rule 50 (exp -> exp EQUALS_OP exp .) ]
  ! LE_OP           [ reduce using rule 50 (exp -> exp EQUALS_OP exp .) ]
  ! GE_OP           [ reduce using rule 50 (exp -> exp EQUALS_OP exp .) ]
  ! NOTEQUALS       [ shift and go to state 68 ]
  ! EQUALS_OP       [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 124

    (54) exp -> exp DIV_ASSIGN exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 54 (exp -> exp DIV_ASSIGN exp .)
    COMMA           reduce using rule 54 (exp -> exp DIV_ASSIGN exp .)
    SEMI_COLON      reduce using rule 54 (exp -> exp DIV_ASSIGN exp .)
    RBIG            reduce using rule 54 (exp -> exp DIV_ASSIGN exp .)
    RBRACE          reduce using rule 54 (exp -> exp DIV_ASSIGN exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81

  ! ADD             [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 54 (exp -> exp DIV_ASSIGN exp .) ]


state 125

    (43) exp -> exp DIV exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    ADD             reduce using rule 43 (exp -> exp DIV exp .)
    MINUS           reduce using rule 43 (exp -> exp DIV exp .)
    MULT            reduce using rule 43 (exp -> exp DIV exp .)
    DIV             reduce using rule 43 (exp -> exp DIV exp .)
    MOD             reduce using rule 43 (exp -> exp DIV exp .)
    L_OP            reduce using rule 43 (exp -> exp DIV exp .)
    G_OP            reduce using rule 43 (exp -> exp DIV exp .)
    LE_OP           reduce using rule 43 (exp -> exp DIV exp .)
    GE_OP           reduce using rule 43 (exp -> exp DIV exp .)
    NOTEQUALS       reduce using rule 43 (exp -> exp DIV exp .)
    EQUALS_OP       reduce using rule 43 (exp -> exp DIV exp .)
    OR_OP           reduce using rule 43 (exp -> exp DIV exp .)
    AND_OP          reduce using rule 43 (exp -> exp DIV exp .)
    MUL_ASSIGN      reduce using rule 43 (exp -> exp DIV exp .)
    DIV_ASSIGN      reduce using rule 43 (exp -> exp DIV exp .)
    MOD_ASSIGN      reduce using rule 43 (exp -> exp DIV exp .)
    ADD_ASSIGN      reduce using rule 43 (exp -> exp DIV exp .)
    SUB_ASSIGN      reduce using rule 43 (exp -> exp DIV exp .)
    LEFT_ASSIGN     reduce using rule 43 (exp -> exp DIV exp .)
    RIGHT_ASSIGN    reduce using rule 43 (exp -> exp DIV exp .)
    AND_ASSIGN      reduce using rule 43 (exp -> exp DIV exp .)
    XOR_ASSIGN      reduce using rule 43 (exp -> exp DIV exp .)
    OR_ASSIGN       reduce using rule 43 (exp -> exp DIV exp .)
    EQUALS          reduce using rule 43 (exp -> exp DIV exp .)
    RPAREN          reduce using rule 43 (exp -> exp DIV exp .)
    COMMA           reduce using rule 43 (exp -> exp DIV exp .)
    SEMI_COLON      reduce using rule 43 (exp -> exp DIV exp .)
    RBIG            reduce using rule 43 (exp -> exp DIV exp .)
    RBRACE          reduce using rule 43 (exp -> exp DIV exp .)

  ! ADD             [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 73 ]
  ! MULT            [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 72 ]
  ! MOD             [ shift and go to state 92 ]
  ! L_OP            [ shift and go to state 89 ]
  ! G_OP            [ shift and go to state 77 ]
  ! LE_OP           [ shift and go to state 75 ]
  ! GE_OP           [ shift and go to state 84 ]
  ! NOTEQUALS       [ shift and go to state 68 ]
  ! EQUALS_OP       [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 126

    (41) exp -> exp MINUS exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    ADD             reduce using rule 41 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 41 (exp -> exp MINUS exp .)
    L_OP            reduce using rule 41 (exp -> exp MINUS exp .)
    G_OP            reduce using rule 41 (exp -> exp MINUS exp .)
    LE_OP           reduce using rule 41 (exp -> exp MINUS exp .)
    GE_OP           reduce using rule 41 (exp -> exp MINUS exp .)
    NOTEQUALS       reduce using rule 41 (exp -> exp MINUS exp .)
    EQUALS_OP       reduce using rule 41 (exp -> exp MINUS exp .)
    OR_OP           reduce using rule 41 (exp -> exp MINUS exp .)
    AND_OP          reduce using rule 41 (exp -> exp MINUS exp .)
    MUL_ASSIGN      reduce using rule 41 (exp -> exp MINUS exp .)
    DIV_ASSIGN      reduce using rule 41 (exp -> exp MINUS exp .)
    MOD_ASSIGN      reduce using rule 41 (exp -> exp MINUS exp .)
    ADD_ASSIGN      reduce using rule 41 (exp -> exp MINUS exp .)
    SUB_ASSIGN      reduce using rule 41 (exp -> exp MINUS exp .)
    LEFT_ASSIGN     reduce using rule 41 (exp -> exp MINUS exp .)
    RIGHT_ASSIGN    reduce using rule 41 (exp -> exp MINUS exp .)
    AND_ASSIGN      reduce using rule 41 (exp -> exp MINUS exp .)
    XOR_ASSIGN      reduce using rule 41 (exp -> exp MINUS exp .)
    OR_ASSIGN       reduce using rule 41 (exp -> exp MINUS exp .)
    EQUALS          reduce using rule 41 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 41 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 41 (exp -> exp MINUS exp .)
    SEMI_COLON      reduce using rule 41 (exp -> exp MINUS exp .)
    RBIG            reduce using rule 41 (exp -> exp MINUS exp .)
    RBRACE          reduce using rule 41 (exp -> exp MINUS exp .)
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92

  ! MULT            [ reduce using rule 41 (exp -> exp MINUS exp .) ]
  ! DIV             [ reduce using rule 41 (exp -> exp MINUS exp .) ]
  ! MOD             [ reduce using rule 41 (exp -> exp MINUS exp .) ]
  ! ADD             [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 73 ]
  ! L_OP            [ shift and go to state 89 ]
  ! G_OP            [ shift and go to state 77 ]
  ! LE_OP           [ shift and go to state 75 ]
  ! GE_OP           [ shift and go to state 84 ]
  ! NOTEQUALS       [ shift and go to state 68 ]
  ! EQUALS_OP       [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 127

    (42) exp -> exp MULT exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    ADD             reduce using rule 42 (exp -> exp MULT exp .)
    MINUS           reduce using rule 42 (exp -> exp MULT exp .)
    MULT            reduce using rule 42 (exp -> exp MULT exp .)
    DIV             reduce using rule 42 (exp -> exp MULT exp .)
    MOD             reduce using rule 42 (exp -> exp MULT exp .)
    L_OP            reduce using rule 42 (exp -> exp MULT exp .)
    G_OP            reduce using rule 42 (exp -> exp MULT exp .)
    LE_OP           reduce using rule 42 (exp -> exp MULT exp .)
    GE_OP           reduce using rule 42 (exp -> exp MULT exp .)
    NOTEQUALS       reduce using rule 42 (exp -> exp MULT exp .)
    EQUALS_OP       reduce using rule 42 (exp -> exp MULT exp .)
    OR_OP           reduce using rule 42 (exp -> exp MULT exp .)
    AND_OP          reduce using rule 42 (exp -> exp MULT exp .)
    MUL_ASSIGN      reduce using rule 42 (exp -> exp MULT exp .)
    DIV_ASSIGN      reduce using rule 42 (exp -> exp MULT exp .)
    MOD_ASSIGN      reduce using rule 42 (exp -> exp MULT exp .)
    ADD_ASSIGN      reduce using rule 42 (exp -> exp MULT exp .)
    SUB_ASSIGN      reduce using rule 42 (exp -> exp MULT exp .)
    LEFT_ASSIGN     reduce using rule 42 (exp -> exp MULT exp .)
    RIGHT_ASSIGN    reduce using rule 42 (exp -> exp MULT exp .)
    AND_ASSIGN      reduce using rule 42 (exp -> exp MULT exp .)
    XOR_ASSIGN      reduce using rule 42 (exp -> exp MULT exp .)
    OR_ASSIGN       reduce using rule 42 (exp -> exp MULT exp .)
    EQUALS          reduce using rule 42 (exp -> exp MULT exp .)
    RPAREN          reduce using rule 42 (exp -> exp MULT exp .)
    COMMA           reduce using rule 42 (exp -> exp MULT exp .)
    SEMI_COLON      reduce using rule 42 (exp -> exp MULT exp .)
    RBIG            reduce using rule 42 (exp -> exp MULT exp .)
    RBRACE          reduce using rule 42 (exp -> exp MULT exp .)

  ! ADD             [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 73 ]
  ! MULT            [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 72 ]
  ! MOD             [ shift and go to state 92 ]
  ! L_OP            [ shift and go to state 89 ]
  ! G_OP            [ shift and go to state 77 ]
  ! LE_OP           [ shift and go to state 75 ]
  ! GE_OP           [ shift and go to state 84 ]
  ! NOTEQUALS       [ shift and go to state 68 ]
  ! EQUALS_OP       [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 128

    (47) exp -> exp LE_OP exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    L_OP            reduce using rule 47 (exp -> exp LE_OP exp .)
    G_OP            reduce using rule 47 (exp -> exp LE_OP exp .)
    LE_OP           reduce using rule 47 (exp -> exp LE_OP exp .)
    GE_OP           reduce using rule 47 (exp -> exp LE_OP exp .)
    NOTEQUALS       reduce using rule 47 (exp -> exp LE_OP exp .)
    EQUALS_OP       reduce using rule 47 (exp -> exp LE_OP exp .)
    OR_OP           reduce using rule 47 (exp -> exp LE_OP exp .)
    AND_OP          reduce using rule 47 (exp -> exp LE_OP exp .)
    MUL_ASSIGN      reduce using rule 47 (exp -> exp LE_OP exp .)
    DIV_ASSIGN      reduce using rule 47 (exp -> exp LE_OP exp .)
    MOD_ASSIGN      reduce using rule 47 (exp -> exp LE_OP exp .)
    ADD_ASSIGN      reduce using rule 47 (exp -> exp LE_OP exp .)
    SUB_ASSIGN      reduce using rule 47 (exp -> exp LE_OP exp .)
    LEFT_ASSIGN     reduce using rule 47 (exp -> exp LE_OP exp .)
    RIGHT_ASSIGN    reduce using rule 47 (exp -> exp LE_OP exp .)
    AND_ASSIGN      reduce using rule 47 (exp -> exp LE_OP exp .)
    XOR_ASSIGN      reduce using rule 47 (exp -> exp LE_OP exp .)
    OR_ASSIGN       reduce using rule 47 (exp -> exp LE_OP exp .)
    EQUALS          reduce using rule 47 (exp -> exp LE_OP exp .)
    RPAREN          reduce using rule 47 (exp -> exp LE_OP exp .)
    COMMA           reduce using rule 47 (exp -> exp LE_OP exp .)
    SEMI_COLON      reduce using rule 47 (exp -> exp LE_OP exp .)
    RBIG            reduce using rule 47 (exp -> exp LE_OP exp .)
    RBRACE          reduce using rule 47 (exp -> exp LE_OP exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92

  ! ADD             [ reduce using rule 47 (exp -> exp LE_OP exp .) ]
  ! MINUS           [ reduce using rule 47 (exp -> exp LE_OP exp .) ]
  ! MULT            [ reduce using rule 47 (exp -> exp LE_OP exp .) ]
  ! DIV             [ reduce using rule 47 (exp -> exp LE_OP exp .) ]
  ! MOD             [ reduce using rule 47 (exp -> exp LE_OP exp .) ]
  ! L_OP            [ shift and go to state 89 ]
  ! G_OP            [ shift and go to state 77 ]
  ! LE_OP           [ shift and go to state 75 ]
  ! GE_OP           [ shift and go to state 84 ]
  ! NOTEQUALS       [ shift and go to state 68 ]
  ! EQUALS_OP       [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 129

    (59) exp -> exp RIGHT_ASSIGN exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .)
    COMMA           reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .)
    SEMI_COLON      reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .)
    RBIG            reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .)
    RBRACE          reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81

  ! ADD             [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 59 (exp -> exp RIGHT_ASSIGN exp .) ]


state 130

    (46) exp -> exp G_OP exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    L_OP            reduce using rule 46 (exp -> exp G_OP exp .)
    G_OP            reduce using rule 46 (exp -> exp G_OP exp .)
    LE_OP           reduce using rule 46 (exp -> exp G_OP exp .)
    GE_OP           reduce using rule 46 (exp -> exp G_OP exp .)
    NOTEQUALS       reduce using rule 46 (exp -> exp G_OP exp .)
    EQUALS_OP       reduce using rule 46 (exp -> exp G_OP exp .)
    OR_OP           reduce using rule 46 (exp -> exp G_OP exp .)
    AND_OP          reduce using rule 46 (exp -> exp G_OP exp .)
    MUL_ASSIGN      reduce using rule 46 (exp -> exp G_OP exp .)
    DIV_ASSIGN      reduce using rule 46 (exp -> exp G_OP exp .)
    MOD_ASSIGN      reduce using rule 46 (exp -> exp G_OP exp .)
    ADD_ASSIGN      reduce using rule 46 (exp -> exp G_OP exp .)
    SUB_ASSIGN      reduce using rule 46 (exp -> exp G_OP exp .)
    LEFT_ASSIGN     reduce using rule 46 (exp -> exp G_OP exp .)
    RIGHT_ASSIGN    reduce using rule 46 (exp -> exp G_OP exp .)
    AND_ASSIGN      reduce using rule 46 (exp -> exp G_OP exp .)
    XOR_ASSIGN      reduce using rule 46 (exp -> exp G_OP exp .)
    OR_ASSIGN       reduce using rule 46 (exp -> exp G_OP exp .)
    EQUALS          reduce using rule 46 (exp -> exp G_OP exp .)
    RPAREN          reduce using rule 46 (exp -> exp G_OP exp .)
    COMMA           reduce using rule 46 (exp -> exp G_OP exp .)
    SEMI_COLON      reduce using rule 46 (exp -> exp G_OP exp .)
    RBIG            reduce using rule 46 (exp -> exp G_OP exp .)
    RBRACE          reduce using rule 46 (exp -> exp G_OP exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92

  ! ADD             [ reduce using rule 46 (exp -> exp G_OP exp .) ]
  ! MINUS           [ reduce using rule 46 (exp -> exp G_OP exp .) ]
  ! MULT            [ reduce using rule 46 (exp -> exp G_OP exp .) ]
  ! DIV             [ reduce using rule 46 (exp -> exp G_OP exp .) ]
  ! MOD             [ reduce using rule 46 (exp -> exp G_OP exp .) ]
  ! L_OP            [ shift and go to state 89 ]
  ! G_OP            [ shift and go to state 77 ]
  ! LE_OP           [ shift and go to state 75 ]
  ! GE_OP           [ shift and go to state 84 ]
  ! NOTEQUALS       [ shift and go to state 68 ]
  ! EQUALS_OP       [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 131

    (51) exp -> exp OR_OP exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    OR_OP           reduce using rule 51 (exp -> exp OR_OP exp .)
    AND_OP          reduce using rule 51 (exp -> exp OR_OP exp .)
    MUL_ASSIGN      reduce using rule 51 (exp -> exp OR_OP exp .)
    DIV_ASSIGN      reduce using rule 51 (exp -> exp OR_OP exp .)
    MOD_ASSIGN      reduce using rule 51 (exp -> exp OR_OP exp .)
    ADD_ASSIGN      reduce using rule 51 (exp -> exp OR_OP exp .)
    SUB_ASSIGN      reduce using rule 51 (exp -> exp OR_OP exp .)
    LEFT_ASSIGN     reduce using rule 51 (exp -> exp OR_OP exp .)
    RIGHT_ASSIGN    reduce using rule 51 (exp -> exp OR_OP exp .)
    AND_ASSIGN      reduce using rule 51 (exp -> exp OR_OP exp .)
    XOR_ASSIGN      reduce using rule 51 (exp -> exp OR_OP exp .)
    OR_ASSIGN       reduce using rule 51 (exp -> exp OR_OP exp .)
    EQUALS          reduce using rule 51 (exp -> exp OR_OP exp .)
    RPAREN          reduce using rule 51 (exp -> exp OR_OP exp .)
    COMMA           reduce using rule 51 (exp -> exp OR_OP exp .)
    SEMI_COLON      reduce using rule 51 (exp -> exp OR_OP exp .)
    RBIG            reduce using rule 51 (exp -> exp OR_OP exp .)
    RBRACE          reduce using rule 51 (exp -> exp OR_OP exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69

  ! ADD             [ reduce using rule 51 (exp -> exp OR_OP exp .) ]
  ! MINUS           [ reduce using rule 51 (exp -> exp OR_OP exp .) ]
  ! MULT            [ reduce using rule 51 (exp -> exp OR_OP exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> exp OR_OP exp .) ]
  ! MOD             [ reduce using rule 51 (exp -> exp OR_OP exp .) ]
  ! L_OP            [ reduce using rule 51 (exp -> exp OR_OP exp .) ]
  ! G_OP            [ reduce using rule 51 (exp -> exp OR_OP exp .) ]
  ! LE_OP           [ reduce using rule 51 (exp -> exp OR_OP exp .) ]
  ! GE_OP           [ reduce using rule 51 (exp -> exp OR_OP exp .) ]
  ! NOTEQUALS       [ reduce using rule 51 (exp -> exp OR_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 51 (exp -> exp OR_OP exp .) ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 132

    (60) exp -> exp AND_ASSIGN exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 60 (exp -> exp AND_ASSIGN exp .)
    COMMA           reduce using rule 60 (exp -> exp AND_ASSIGN exp .)
    SEMI_COLON      reduce using rule 60 (exp -> exp AND_ASSIGN exp .)
    RBIG            reduce using rule 60 (exp -> exp AND_ASSIGN exp .)
    RBRACE          reduce using rule 60 (exp -> exp AND_ASSIGN exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81

  ! ADD             [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 60 (exp -> exp AND_ASSIGN exp .) ]


state 133

    (56) exp -> exp ADD_ASSIGN exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 56 (exp -> exp ADD_ASSIGN exp .)
    COMMA           reduce using rule 56 (exp -> exp ADD_ASSIGN exp .)
    SEMI_COLON      reduce using rule 56 (exp -> exp ADD_ASSIGN exp .)
    RBIG            reduce using rule 56 (exp -> exp ADD_ASSIGN exp .)
    RBRACE          reduce using rule 56 (exp -> exp ADD_ASSIGN exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81

  ! ADD             [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 56 (exp -> exp ADD_ASSIGN exp .) ]


state 134

    (63) exp -> exp EQUALS exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 63 (exp -> exp EQUALS exp .)
    COMMA           reduce using rule 63 (exp -> exp EQUALS exp .)
    SEMI_COLON      reduce using rule 63 (exp -> exp EQUALS exp .)
    RBIG            reduce using rule 63 (exp -> exp EQUALS exp .)
    RBRACE          reduce using rule 63 (exp -> exp EQUALS exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81

  ! ADD             [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! MINUS           [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! MULT            [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! DIV             [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! MOD             [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! L_OP            [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! G_OP            [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! LE_OP           [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! GE_OP           [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! NOTEQUALS       [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! EQUALS_OP       [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! OR_OP           [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! AND_OP          [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! AND_ASSIGN      [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! OR_ASSIGN       [ reduce using rule 63 (exp -> exp EQUALS exp .) ]
  ! EQUALS          [ reduce using rule 63 (exp -> exp EQUALS exp .) ]


state 135

    (52) exp -> exp AND_OP exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    OR_OP           reduce using rule 52 (exp -> exp AND_OP exp .)
    AND_OP          reduce using rule 52 (exp -> exp AND_OP exp .)
    MUL_ASSIGN      reduce using rule 52 (exp -> exp AND_OP exp .)
    DIV_ASSIGN      reduce using rule 52 (exp -> exp AND_OP exp .)
    MOD_ASSIGN      reduce using rule 52 (exp -> exp AND_OP exp .)
    ADD_ASSIGN      reduce using rule 52 (exp -> exp AND_OP exp .)
    SUB_ASSIGN      reduce using rule 52 (exp -> exp AND_OP exp .)
    LEFT_ASSIGN     reduce using rule 52 (exp -> exp AND_OP exp .)
    RIGHT_ASSIGN    reduce using rule 52 (exp -> exp AND_OP exp .)
    AND_ASSIGN      reduce using rule 52 (exp -> exp AND_OP exp .)
    XOR_ASSIGN      reduce using rule 52 (exp -> exp AND_OP exp .)
    OR_ASSIGN       reduce using rule 52 (exp -> exp AND_OP exp .)
    EQUALS          reduce using rule 52 (exp -> exp AND_OP exp .)
    RPAREN          reduce using rule 52 (exp -> exp AND_OP exp .)
    COMMA           reduce using rule 52 (exp -> exp AND_OP exp .)
    SEMI_COLON      reduce using rule 52 (exp -> exp AND_OP exp .)
    RBIG            reduce using rule 52 (exp -> exp AND_OP exp .)
    RBRACE          reduce using rule 52 (exp -> exp AND_OP exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69

  ! ADD             [ reduce using rule 52 (exp -> exp AND_OP exp .) ]
  ! MINUS           [ reduce using rule 52 (exp -> exp AND_OP exp .) ]
  ! MULT            [ reduce using rule 52 (exp -> exp AND_OP exp .) ]
  ! DIV             [ reduce using rule 52 (exp -> exp AND_OP exp .) ]
  ! MOD             [ reduce using rule 52 (exp -> exp AND_OP exp .) ]
  ! L_OP            [ reduce using rule 52 (exp -> exp AND_OP exp .) ]
  ! G_OP            [ reduce using rule 52 (exp -> exp AND_OP exp .) ]
  ! LE_OP           [ reduce using rule 52 (exp -> exp AND_OP exp .) ]
  ! GE_OP           [ reduce using rule 52 (exp -> exp AND_OP exp .) ]
  ! NOTEQUALS       [ reduce using rule 52 (exp -> exp AND_OP exp .) ]
  ! EQUALS_OP       [ reduce using rule 52 (exp -> exp AND_OP exp .) ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 136

    (40) exp -> exp ADD exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    ADD             reduce using rule 40 (exp -> exp ADD exp .)
    MINUS           reduce using rule 40 (exp -> exp ADD exp .)
    L_OP            reduce using rule 40 (exp -> exp ADD exp .)
    G_OP            reduce using rule 40 (exp -> exp ADD exp .)
    LE_OP           reduce using rule 40 (exp -> exp ADD exp .)
    GE_OP           reduce using rule 40 (exp -> exp ADD exp .)
    NOTEQUALS       reduce using rule 40 (exp -> exp ADD exp .)
    EQUALS_OP       reduce using rule 40 (exp -> exp ADD exp .)
    OR_OP           reduce using rule 40 (exp -> exp ADD exp .)
    AND_OP          reduce using rule 40 (exp -> exp ADD exp .)
    MUL_ASSIGN      reduce using rule 40 (exp -> exp ADD exp .)
    DIV_ASSIGN      reduce using rule 40 (exp -> exp ADD exp .)
    MOD_ASSIGN      reduce using rule 40 (exp -> exp ADD exp .)
    ADD_ASSIGN      reduce using rule 40 (exp -> exp ADD exp .)
    SUB_ASSIGN      reduce using rule 40 (exp -> exp ADD exp .)
    LEFT_ASSIGN     reduce using rule 40 (exp -> exp ADD exp .)
    RIGHT_ASSIGN    reduce using rule 40 (exp -> exp ADD exp .)
    AND_ASSIGN      reduce using rule 40 (exp -> exp ADD exp .)
    XOR_ASSIGN      reduce using rule 40 (exp -> exp ADD exp .)
    OR_ASSIGN       reduce using rule 40 (exp -> exp ADD exp .)
    EQUALS          reduce using rule 40 (exp -> exp ADD exp .)
    RPAREN          reduce using rule 40 (exp -> exp ADD exp .)
    COMMA           reduce using rule 40 (exp -> exp ADD exp .)
    SEMI_COLON      reduce using rule 40 (exp -> exp ADD exp .)
    RBIG            reduce using rule 40 (exp -> exp ADD exp .)
    RBRACE          reduce using rule 40 (exp -> exp ADD exp .)
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92

  ! MULT            [ reduce using rule 40 (exp -> exp ADD exp .) ]
  ! DIV             [ reduce using rule 40 (exp -> exp ADD exp .) ]
  ! MOD             [ reduce using rule 40 (exp -> exp ADD exp .) ]
  ! ADD             [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 73 ]
  ! L_OP            [ shift and go to state 89 ]
  ! G_OP            [ shift and go to state 77 ]
  ! LE_OP           [ shift and go to state 75 ]
  ! GE_OP           [ shift and go to state 84 ]
  ! NOTEQUALS       [ shift and go to state 68 ]
  ! EQUALS_OP       [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 137

    (48) exp -> exp GE_OP exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    L_OP            reduce using rule 48 (exp -> exp GE_OP exp .)
    G_OP            reduce using rule 48 (exp -> exp GE_OP exp .)
    LE_OP           reduce using rule 48 (exp -> exp GE_OP exp .)
    GE_OP           reduce using rule 48 (exp -> exp GE_OP exp .)
    NOTEQUALS       reduce using rule 48 (exp -> exp GE_OP exp .)
    EQUALS_OP       reduce using rule 48 (exp -> exp GE_OP exp .)
    OR_OP           reduce using rule 48 (exp -> exp GE_OP exp .)
    AND_OP          reduce using rule 48 (exp -> exp GE_OP exp .)
    MUL_ASSIGN      reduce using rule 48 (exp -> exp GE_OP exp .)
    DIV_ASSIGN      reduce using rule 48 (exp -> exp GE_OP exp .)
    MOD_ASSIGN      reduce using rule 48 (exp -> exp GE_OP exp .)
    ADD_ASSIGN      reduce using rule 48 (exp -> exp GE_OP exp .)
    SUB_ASSIGN      reduce using rule 48 (exp -> exp GE_OP exp .)
    LEFT_ASSIGN     reduce using rule 48 (exp -> exp GE_OP exp .)
    RIGHT_ASSIGN    reduce using rule 48 (exp -> exp GE_OP exp .)
    AND_ASSIGN      reduce using rule 48 (exp -> exp GE_OP exp .)
    XOR_ASSIGN      reduce using rule 48 (exp -> exp GE_OP exp .)
    OR_ASSIGN       reduce using rule 48 (exp -> exp GE_OP exp .)
    EQUALS          reduce using rule 48 (exp -> exp GE_OP exp .)
    RPAREN          reduce using rule 48 (exp -> exp GE_OP exp .)
    COMMA           reduce using rule 48 (exp -> exp GE_OP exp .)
    SEMI_COLON      reduce using rule 48 (exp -> exp GE_OP exp .)
    RBIG            reduce using rule 48 (exp -> exp GE_OP exp .)
    RBRACE          reduce using rule 48 (exp -> exp GE_OP exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92

  ! ADD             [ reduce using rule 48 (exp -> exp GE_OP exp .) ]
  ! MINUS           [ reduce using rule 48 (exp -> exp GE_OP exp .) ]
  ! MULT            [ reduce using rule 48 (exp -> exp GE_OP exp .) ]
  ! DIV             [ reduce using rule 48 (exp -> exp GE_OP exp .) ]
  ! MOD             [ reduce using rule 48 (exp -> exp GE_OP exp .) ]
  ! L_OP            [ shift and go to state 89 ]
  ! G_OP            [ shift and go to state 77 ]
  ! LE_OP           [ shift and go to state 75 ]
  ! GE_OP           [ shift and go to state 84 ]
  ! NOTEQUALS       [ shift and go to state 68 ]
  ! EQUALS_OP       [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 138

    (57) exp -> exp SUB_ASSIGN exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 57 (exp -> exp SUB_ASSIGN exp .)
    COMMA           reduce using rule 57 (exp -> exp SUB_ASSIGN exp .)
    SEMI_COLON      reduce using rule 57 (exp -> exp SUB_ASSIGN exp .)
    RBIG            reduce using rule 57 (exp -> exp SUB_ASSIGN exp .)
    RBRACE          reduce using rule 57 (exp -> exp SUB_ASSIGN exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81

  ! ADD             [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 57 (exp -> exp SUB_ASSIGN exp .) ]


state 139

    (55) exp -> exp MOD_ASSIGN exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 55 (exp -> exp MOD_ASSIGN exp .)
    COMMA           reduce using rule 55 (exp -> exp MOD_ASSIGN exp .)
    SEMI_COLON      reduce using rule 55 (exp -> exp MOD_ASSIGN exp .)
    RBIG            reduce using rule 55 (exp -> exp MOD_ASSIGN exp .)
    RBRACE          reduce using rule 55 (exp -> exp MOD_ASSIGN exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81

  ! ADD             [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 55 (exp -> exp MOD_ASSIGN exp .) ]


state 140

    (61) exp -> exp XOR_ASSIGN exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 61 (exp -> exp XOR_ASSIGN exp .)
    COMMA           reduce using rule 61 (exp -> exp XOR_ASSIGN exp .)
    SEMI_COLON      reduce using rule 61 (exp -> exp XOR_ASSIGN exp .)
    RBIG            reduce using rule 61 (exp -> exp XOR_ASSIGN exp .)
    RBRACE          reduce using rule 61 (exp -> exp XOR_ASSIGN exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81

  ! ADD             [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 61 (exp -> exp XOR_ASSIGN exp .) ]


state 141

    (62) exp -> exp OR_ASSIGN exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 62 (exp -> exp OR_ASSIGN exp .)
    COMMA           reduce using rule 62 (exp -> exp OR_ASSIGN exp .)
    SEMI_COLON      reduce using rule 62 (exp -> exp OR_ASSIGN exp .)
    RBIG            reduce using rule 62 (exp -> exp OR_ASSIGN exp .)
    RBRACE          reduce using rule 62 (exp -> exp OR_ASSIGN exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81

  ! ADD             [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 62 (exp -> exp OR_ASSIGN exp .) ]


state 142

    (45) exp -> exp L_OP exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    L_OP            reduce using rule 45 (exp -> exp L_OP exp .)
    G_OP            reduce using rule 45 (exp -> exp L_OP exp .)
    LE_OP           reduce using rule 45 (exp -> exp L_OP exp .)
    GE_OP           reduce using rule 45 (exp -> exp L_OP exp .)
    NOTEQUALS       reduce using rule 45 (exp -> exp L_OP exp .)
    EQUALS_OP       reduce using rule 45 (exp -> exp L_OP exp .)
    OR_OP           reduce using rule 45 (exp -> exp L_OP exp .)
    AND_OP          reduce using rule 45 (exp -> exp L_OP exp .)
    MUL_ASSIGN      reduce using rule 45 (exp -> exp L_OP exp .)
    DIV_ASSIGN      reduce using rule 45 (exp -> exp L_OP exp .)
    MOD_ASSIGN      reduce using rule 45 (exp -> exp L_OP exp .)
    ADD_ASSIGN      reduce using rule 45 (exp -> exp L_OP exp .)
    SUB_ASSIGN      reduce using rule 45 (exp -> exp L_OP exp .)
    LEFT_ASSIGN     reduce using rule 45 (exp -> exp L_OP exp .)
    RIGHT_ASSIGN    reduce using rule 45 (exp -> exp L_OP exp .)
    AND_ASSIGN      reduce using rule 45 (exp -> exp L_OP exp .)
    XOR_ASSIGN      reduce using rule 45 (exp -> exp L_OP exp .)
    OR_ASSIGN       reduce using rule 45 (exp -> exp L_OP exp .)
    EQUALS          reduce using rule 45 (exp -> exp L_OP exp .)
    RPAREN          reduce using rule 45 (exp -> exp L_OP exp .)
    COMMA           reduce using rule 45 (exp -> exp L_OP exp .)
    SEMI_COLON      reduce using rule 45 (exp -> exp L_OP exp .)
    RBIG            reduce using rule 45 (exp -> exp L_OP exp .)
    RBRACE          reduce using rule 45 (exp -> exp L_OP exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92

  ! ADD             [ reduce using rule 45 (exp -> exp L_OP exp .) ]
  ! MINUS           [ reduce using rule 45 (exp -> exp L_OP exp .) ]
  ! MULT            [ reduce using rule 45 (exp -> exp L_OP exp .) ]
  ! DIV             [ reduce using rule 45 (exp -> exp L_OP exp .) ]
  ! MOD             [ reduce using rule 45 (exp -> exp L_OP exp .) ]
  ! L_OP            [ shift and go to state 89 ]
  ! G_OP            [ shift and go to state 77 ]
  ! LE_OP           [ shift and go to state 75 ]
  ! GE_OP           [ shift and go to state 84 ]
  ! NOTEQUALS       [ shift and go to state 68 ]
  ! EQUALS_OP       [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 143

    (53) exp -> exp MUL_ASSIGN exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 53 (exp -> exp MUL_ASSIGN exp .)
    COMMA           reduce using rule 53 (exp -> exp MUL_ASSIGN exp .)
    SEMI_COLON      reduce using rule 53 (exp -> exp MUL_ASSIGN exp .)
    RBIG            reduce using rule 53 (exp -> exp MUL_ASSIGN exp .)
    RBRACE          reduce using rule 53 (exp -> exp MUL_ASSIGN exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81

  ! ADD             [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 53 (exp -> exp MUL_ASSIGN exp .) ]


state 144

    (58) exp -> exp LEFT_ASSIGN exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RPAREN          reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .)
    COMMA           reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .)
    SEMI_COLON      reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .)
    RBIG            reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .)
    RBRACE          reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81

  ! ADD             [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MINUS           [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MULT            [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! DIV             [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MOD             [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! L_OP            [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! G_OP            [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! LE_OP           [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! GE_OP           [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! NOTEQUALS       [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! EQUALS_OP       [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! OR_OP           [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! AND_OP          [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MUL_ASSIGN      [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! DIV_ASSIGN      [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! MOD_ASSIGN      [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! ADD_ASSIGN      [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! SUB_ASSIGN      [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! LEFT_ASSIGN     [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! RIGHT_ASSIGN    [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! AND_ASSIGN      [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! XOR_ASSIGN      [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! OR_ASSIGN       [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]
  ! EQUALS          [ reduce using rule 58 (exp -> exp LEFT_ASSIGN exp .) ]


state 145

    (44) exp -> exp MOD exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    ADD             reduce using rule 44 (exp -> exp MOD exp .)
    MINUS           reduce using rule 44 (exp -> exp MOD exp .)
    MULT            reduce using rule 44 (exp -> exp MOD exp .)
    DIV             reduce using rule 44 (exp -> exp MOD exp .)
    MOD             reduce using rule 44 (exp -> exp MOD exp .)
    L_OP            reduce using rule 44 (exp -> exp MOD exp .)
    G_OP            reduce using rule 44 (exp -> exp MOD exp .)
    LE_OP           reduce using rule 44 (exp -> exp MOD exp .)
    GE_OP           reduce using rule 44 (exp -> exp MOD exp .)
    NOTEQUALS       reduce using rule 44 (exp -> exp MOD exp .)
    EQUALS_OP       reduce using rule 44 (exp -> exp MOD exp .)
    OR_OP           reduce using rule 44 (exp -> exp MOD exp .)
    AND_OP          reduce using rule 44 (exp -> exp MOD exp .)
    MUL_ASSIGN      reduce using rule 44 (exp -> exp MOD exp .)
    DIV_ASSIGN      reduce using rule 44 (exp -> exp MOD exp .)
    MOD_ASSIGN      reduce using rule 44 (exp -> exp MOD exp .)
    ADD_ASSIGN      reduce using rule 44 (exp -> exp MOD exp .)
    SUB_ASSIGN      reduce using rule 44 (exp -> exp MOD exp .)
    LEFT_ASSIGN     reduce using rule 44 (exp -> exp MOD exp .)
    RIGHT_ASSIGN    reduce using rule 44 (exp -> exp MOD exp .)
    AND_ASSIGN      reduce using rule 44 (exp -> exp MOD exp .)
    XOR_ASSIGN      reduce using rule 44 (exp -> exp MOD exp .)
    OR_ASSIGN       reduce using rule 44 (exp -> exp MOD exp .)
    EQUALS          reduce using rule 44 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 44 (exp -> exp MOD exp .)
    COMMA           reduce using rule 44 (exp -> exp MOD exp .)
    SEMI_COLON      reduce using rule 44 (exp -> exp MOD exp .)
    RBIG            reduce using rule 44 (exp -> exp MOD exp .)
    RBRACE          reduce using rule 44 (exp -> exp MOD exp .)

  ! ADD             [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 73 ]
  ! MULT            [ shift and go to state 74 ]
  ! DIV             [ shift and go to state 72 ]
  ! MOD             [ shift and go to state 92 ]
  ! L_OP            [ shift and go to state 89 ]
  ! G_OP            [ shift and go to state 77 ]
  ! LE_OP           [ shift and go to state 75 ]
  ! GE_OP           [ shift and go to state 84 ]
  ! NOTEQUALS       [ shift and go to state 68 ]
  ! EQUALS_OP       [ shift and go to state 69 ]
  ! OR_OP           [ shift and go to state 78 ]
  ! AND_OP          [ shift and go to state 82 ]
  ! MUL_ASSIGN      [ shift and go to state 90 ]
  ! DIV_ASSIGN      [ shift and go to state 70 ]
  ! MOD_ASSIGN      [ shift and go to state 86 ]
  ! ADD_ASSIGN      [ shift and go to state 80 ]
  ! SUB_ASSIGN      [ shift and go to state 85 ]
  ! LEFT_ASSIGN     [ shift and go to state 91 ]
  ! RIGHT_ASSIGN    [ shift and go to state 76 ]
  ! AND_ASSIGN      [ shift and go to state 79 ]
  ! XOR_ASSIGN      [ shift and go to state 87 ]
  ! OR_ASSIGN       [ shift and go to state 88 ]
  ! EQUALS          [ shift and go to state 81 ]


state 146

    (118) function_call -> VARIABLE lparen rparen .

    ADD             reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    MINUS           reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    MULT            reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    DIV             reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    MOD             reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    L_OP            reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    G_OP            reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    LE_OP           reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    GE_OP           reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    NOTEQUALS       reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    EQUALS_OP       reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    OR_OP           reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    AND_OP          reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    MUL_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    DIV_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    MOD_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    ADD_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    SUB_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    LEFT_ASSIGN     reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    RIGHT_ASSIGN    reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    AND_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    XOR_ASSIGN      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    OR_ASSIGN       reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    EQUALS          reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    SEMI_COLON      reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    RPAREN          reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    COMMA           reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    RBIG            reduce using rule 118 (function_call -> VARIABLE lparen rparen .)
    RBRACE          reduce using rule 118 (function_call -> VARIABLE lparen rparen .)


state 147

    (86) iterative_statement -> DO SEMI_COLON WHILE lparen . exp rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    lparen                         shift and go to state 28
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    exp                            shift and go to state 173
    unary_operator                 shift and go to state 24

state 148

    (84) iterative_statement -> DO statement WHILE lparen . exp rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    lparen                         shift and go to state 28
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    exp                            shift and go to state 174
    unary_operator                 shift and go to state 24

state 149

    (85) iterative_statement -> DO lbrace statements rbrace . WHILE lparen exp rparen SEMI_COLON

    WHILE           shift and go to state 175


state 150

    (87) iterative_statement -> DO lbrace rbrace WHILE . lparen exp rparen SEMI_COLON
    (122) lparen -> . LPAREN

    LPAREN          shift and go to state 15

    lparen                         shift and go to state 176

state 151

    (98) print_function -> PRINTF lparen exp rparen .

    SEMI_COLON      reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    ADD             reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    MINUS           reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    MULT            reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    DIV             reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    MOD             reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    L_OP            reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    G_OP            reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    LE_OP           reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    GE_OP           reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    NOTEQUALS       reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    EQUALS_OP       reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    OR_OP           reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    AND_OP          reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    MUL_ASSIGN      reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    DIV_ASSIGN      reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    MOD_ASSIGN      reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    ADD_ASSIGN      reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    SUB_ASSIGN      reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    LEFT_ASSIGN     reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    RIGHT_ASSIGN    reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    AND_ASSIGN      reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    XOR_ASSIGN      reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    OR_ASSIGN       reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    EQUALS          reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    RBIG            reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    RPAREN          reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    COMMA           reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)
    RBRACE          reduce using rule 98 (print_function -> PRINTF lparen exp rparen .)


state 152

    (80) iterative_statement -> WHILE lparen exp rparen . statement
    (81) iterative_statement -> WHILE lparen exp rparen . SEMI_COLON
    (82) iterative_statement -> WHILE lparen exp rparen . lbrace statements rbrace
    (83) iterative_statement -> WHILE lparen exp rparen . lbrace rbrace
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (124) lbrace -> . LBRACE
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    SEMI_COLON      shift and go to state 177
    COMMENT         shift and go to state 14
    LBRACE          shift and go to state 51
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 178
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    lbrace                         shift and go to state 179
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 153

    (101) main_function -> MAIN lparen parameters rparen . lbrace statements rbrace
    (102) main_function -> MAIN lparen parameters rparen . lbrace rbrace
    (124) lbrace -> . LBRACE

    LBRACE          shift and go to state 51

    lbrace                         shift and go to state 180

state 154

    (105) main_function -> MAIN lparen rparen lbrace . statements rbrace
    (106) main_function -> MAIN lparen rparen lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 181
    rbrace                         shift and go to state 182
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 155

    (115) parameters -> type VARIABLE . COMMA parameters
    (116) parameters -> type VARIABLE .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 116 (parameters -> type VARIABLE .)


state 156

    (19) enum_list -> VARIABLE EQUALS exp . COMMA enum_list
    (21) enum_list -> VARIABLE EQUALS exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    COMMA           shift and go to state 184
    SEMI_COLON      reduce using rule 21 (enum_list -> VARIABLE EQUALS exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81


state 157

    (22) enum_list -> VARIABLE LBIG exp . RBIG COMMA enum_list
    (23) enum_list -> VARIABLE LBIG exp . RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (24) enum_list -> VARIABLE LBIG exp . RBIG
    (25) enum_list -> VARIABLE LBIG exp . RBIG EQUALS LBRACE num_list RBRACE
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RBIG            shift and go to state 185
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81


state 158

    (18) enum_list -> VARIABLE COMMA enum_list .

    SEMI_COLON      reduce using rule 18 (enum_list -> VARIABLE COMMA enum_list .)


state 159

    (18) enum_list -> VARIABLE . COMMA enum_list
    (19) enum_list -> VARIABLE . EQUALS exp COMMA enum_list
    (20) enum_list -> VARIABLE .
    (21) enum_list -> VARIABLE . EQUALS exp
    (22) enum_list -> VARIABLE . LBIG exp RBIG COMMA enum_list
    (23) enum_list -> VARIABLE . LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (24) enum_list -> VARIABLE . LBIG exp RBIG
    (25) enum_list -> VARIABLE . LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    COMMA           shift and go to state 109
    EQUALS          shift and go to state 107
    SEMI_COLON      reduce using rule 20 (enum_list -> VARIABLE .)
    LBIG            shift and go to state 108


state 160

    (17) declaration -> type VARIABLE lparen rparen . SEMI_COLON
    (111) normal_function -> type VARIABLE lparen rparen . lbrace statements rbrace
    (112) normal_function -> type VARIABLE lparen rparen . lbrace rbrace
    (124) lbrace -> . LBRACE

    SEMI_COLON      shift and go to state 187
    LBRACE          shift and go to state 51

    lbrace                         shift and go to state 186

state 161

    (16) declaration -> type VARIABLE lparen parameters . rparen SEMI_COLON
    (107) normal_function -> type VARIABLE lparen parameters . rparen lbrace statements rbrace
    (108) normal_function -> type VARIABLE lparen parameters . rparen lbrace rbrace
    (123) rparen -> . RPAREN

    RPAREN          shift and go to state 105

    rparen                         shift and go to state 188

state 162

    (103) main_function -> type MAIN lparen rparen . lbrace statements rbrace
    (104) main_function -> type MAIN lparen rparen . lbrace rbrace
    (124) lbrace -> . LBRACE

    LBRACE          shift and go to state 51

    lbrace                         shift and go to state 189

state 163

    (99) main_function -> type MAIN lparen parameters . rparen lbrace statements rbrace
    (100) main_function -> type MAIN lparen parameters . rparen lbrace rbrace
    (123) rparen -> . RPAREN

    RPAREN          shift and go to state 105

    rparen                         shift and go to state 190

state 164

    (73) unary_expression -> unary_operator VARIABLE LBIG exp . RBIG
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    RBIG            shift and go to state 191
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81


state 165

    (76) iterative_statement -> FOR lparen iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> FOR lparen iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> FOR lparen iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> FOR lparen iterative_exp SEMI_COLON . iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (88) iterative_exp -> . exp COMMA iterative_exp
    (89) iterative_exp -> . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    exp                            shift and go to state 114
    lparen                         shift and go to state 28
    unary_expression               shift and go to state 32
    iterative_exp                  shift and go to state 192
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    unary_operator                 shift and go to state 24

state 166

    (88) iterative_exp -> exp COMMA . iterative_exp
    (88) iterative_exp -> . exp COMMA iterative_exp
    (89) iterative_exp -> . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    exp                            shift and go to state 114
    unary_expression               shift and go to state 32
    iterative_exp                  shift and go to state 193
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    constant                       shift and go to state 12
    unary_operator                 shift and go to state 24

state 167

    (109) normal_function -> VARIABLE lparen parameters rparen . lbrace statements rbrace
    (110) normal_function -> VARIABLE lparen parameters rparen . lbrace rbrace
    (124) lbrace -> . LBRACE

    LBRACE          shift and go to state 51

    lbrace                         shift and go to state 194

state 168

    (117) function_call -> VARIABLE lparen arguments rparen .

    ADD             reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    MINUS           reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    MULT            reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    DIV             reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    MOD             reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    L_OP            reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    G_OP            reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    LE_OP           reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    GE_OP           reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    NOTEQUALS       reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    EQUALS_OP       reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    OR_OP           reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    AND_OP          reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    MUL_ASSIGN      reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    DIV_ASSIGN      reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    MOD_ASSIGN      reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    ADD_ASSIGN      reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    SUB_ASSIGN      reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    LEFT_ASSIGN     reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    RIGHT_ASSIGN    reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    AND_ASSIGN      reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    XOR_ASSIGN      reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    OR_ASSIGN       reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    EQUALS          reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    SEMI_COLON      reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    RPAREN          reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    COMMA           reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    RBIG            reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)
    RBRACE          reduce using rule 117 (function_call -> VARIABLE lparen arguments rparen .)


state 169

    (120) arguments -> arguments COMMA . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    exp                            shift and go to state 195
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    constant                       shift and go to state 12
    unary_operator                 shift and go to state 24

state 170

    (113) normal_function -> VARIABLE lparen rparen lbrace . statements rbrace
    (114) normal_function -> VARIABLE lparen rparen lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 196
    rbrace                         shift and go to state 197
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 171

    (68) exp -> VARIABLE LBIG exp RBIG .
    (72) unary_expression -> VARIABLE LBIG exp RBIG . unary_operator
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT

    ADD             reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    MINUS           reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    MULT            reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    DIV             reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    MOD             reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    L_OP            reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    G_OP            reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    LE_OP           reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    GE_OP           reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    NOTEQUALS       reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    EQUALS_OP       reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    OR_OP           reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    AND_OP          reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    MUL_ASSIGN      reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    DIV_ASSIGN      reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    MOD_ASSIGN      reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    ADD_ASSIGN      reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    SUB_ASSIGN      reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    LEFT_ASSIGN     reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    RIGHT_ASSIGN    reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    AND_ASSIGN      reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    XOR_ASSIGN      reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    OR_ASSIGN       reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    EQUALS          reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    RPAREN          reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    COMMA           reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    SEMI_COLON      reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    RBIG            reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    RBRACE          reduce using rule 68 (exp -> VARIABLE LBIG exp RBIG .)
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33

    unary_operator                 shift and go to state 198

state 172

    (90) conditional_statement -> IF lparen exp rparen . statement
    (91) conditional_statement -> IF lparen exp rparen . lbrace statements rbrace
    (92) conditional_statement -> IF lparen exp rparen . statement ELSE statement
    (93) conditional_statement -> IF lparen exp rparen . lbrace statements rbrace ELSE statement
    (94) conditional_statement -> IF lparen exp rparen . statement ELSE lbrace statements rbrace
    (95) conditional_statement -> IF lparen exp rparen . lbrace statements rbrace ELSE lbrace statements rbrace
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (124) lbrace -> . LBRACE
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    COMMENT         shift and go to state 14
    LBRACE          shift and go to state 51
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 199
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    lbrace                         shift and go to state 200
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 173

    (86) iterative_statement -> DO SEMI_COLON WHILE lparen exp . rparen SEMI_COLON
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp
    (123) rparen -> . RPAREN

    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81
    RPAREN          shift and go to state 105

    rparen                         shift and go to state 201

state 174

    (84) iterative_statement -> DO statement WHILE lparen exp . rparen SEMI_COLON
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp
    (123) rparen -> . RPAREN

    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81
    RPAREN          shift and go to state 105

    rparen                         shift and go to state 202

state 175

    (85) iterative_statement -> DO lbrace statements rbrace WHILE . lparen exp rparen SEMI_COLON
    (122) lparen -> . LPAREN

    LPAREN          shift and go to state 15

    lparen                         shift and go to state 203

state 176

    (87) iterative_statement -> DO lbrace rbrace WHILE lparen . exp rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    lparen                         shift and go to state 28
    unary_expression               shift and go to state 32
    print_function                 shift and go to state 34
    function_call                  shift and go to state 8
    exp                            shift and go to state 204
    constant                       shift and go to state 12
    unary_operator                 shift and go to state 24

state 177

    (81) iterative_statement -> WHILE lparen exp rparen SEMI_COLON .

    RBRACE          reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    COMMENT         reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    VARIABLE        reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    FOR             reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    WHILE           reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    DO              reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    BREAK           reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    CONTINUE        reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    RETURN          reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    IF              reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    INT             reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    FLOAT           reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    CHAR            reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    DOUBLE          reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    VOID            reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    SHORT           reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    LONG            reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    LPAREN          reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    HEX_INT         reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    DOT_REAL        reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    EXP_REAL        reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    DEC_INT         reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    CHARACTER       reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    MAIN            reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    INCREMENT       reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    DECREMENT       reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    PRINTF          reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    $end            reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)
    ELSE            reduce using rule 81 (iterative_statement -> WHILE lparen exp rparen SEMI_COLON .)


state 178

    (80) iterative_statement -> WHILE lparen exp rparen statement .

    RBRACE          reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    COMMENT         reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    VARIABLE        reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    FOR             reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    WHILE           reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    DO              reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    BREAK           reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    CONTINUE        reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    RETURN          reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    IF              reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    INT             reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    FLOAT           reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    CHAR            reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    DOUBLE          reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    VOID            reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    SHORT           reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    LONG            reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    LPAREN          reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    HEX_INT         reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    DOT_REAL        reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    EXP_REAL        reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    DEC_INT         reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    CHARACTER       reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    MAIN            reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    INCREMENT       reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    DECREMENT       reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    PRINTF          reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    $end            reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)
    ELSE            reduce using rule 80 (iterative_statement -> WHILE lparen exp rparen statement .)


state 179

    (82) iterative_statement -> WHILE lparen exp rparen lbrace . statements rbrace
    (83) iterative_statement -> WHILE lparen exp rparen lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 205
    rbrace                         shift and go to state 206
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 180

    (101) main_function -> MAIN lparen parameters rparen lbrace . statements rbrace
    (102) main_function -> MAIN lparen parameters rparen lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 207
    rbrace                         shift and go to state 208
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 181

    (105) main_function -> MAIN lparen rparen lbrace statements . rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 209
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 182

    (106) main_function -> MAIN lparen rparen lbrace rbrace .

    RBRACE          reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    COMMENT         reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    VARIABLE        reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    FOR             reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    WHILE           reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    DO              reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    BREAK           reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    CONTINUE        reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    RETURN          reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    IF              reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    INT             reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    FLOAT           reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    CHAR            reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    DOUBLE          reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    VOID            reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    SHORT           reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    LONG            reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    LPAREN          reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    HEX_INT         reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    DOT_REAL        reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    EXP_REAL        reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    DEC_INT         reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    CHARACTER       reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    MAIN            reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    INCREMENT       reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    DECREMENT       reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    PRINTF          reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    $end            reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)
    ELSE            reduce using rule 106 (main_function -> MAIN lparen rparen lbrace rbrace .)


state 183

    (115) parameters -> type VARIABLE COMMA . parameters
    (115) parameters -> . type VARIABLE COMMA parameters
    (116) parameters -> . type VARIABLE
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG

    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44

    type                           shift and go to state 104
    parameters                     shift and go to state 210

state 184

    (19) enum_list -> VARIABLE EQUALS exp COMMA . enum_list
    (18) enum_list -> . VARIABLE COMMA enum_list
    (19) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (20) enum_list -> . VARIABLE
    (21) enum_list -> . VARIABLE EQUALS exp
    (22) enum_list -> . VARIABLE LBIG exp RBIG COMMA enum_list
    (23) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (24) enum_list -> . VARIABLE LBIG exp RBIG
    (25) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    VARIABLE        shift and go to state 159

    enum_list                      shift and go to state 211

state 185

    (22) enum_list -> VARIABLE LBIG exp RBIG . COMMA enum_list
    (23) enum_list -> VARIABLE LBIG exp RBIG . EQUALS LBRACE num_list RBRACE COMMA enum_list
    (24) enum_list -> VARIABLE LBIG exp RBIG .
    (25) enum_list -> VARIABLE LBIG exp RBIG . EQUALS LBRACE num_list RBRACE

    COMMA           shift and go to state 213
    EQUALS          shift and go to state 212
    SEMI_COLON      reduce using rule 24 (enum_list -> VARIABLE LBIG exp RBIG .)


state 186

    (111) normal_function -> type VARIABLE lparen rparen lbrace . statements rbrace
    (112) normal_function -> type VARIABLE lparen rparen lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 214
    rbrace                         shift and go to state 215
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 187

    (17) declaration -> type VARIABLE lparen rparen SEMI_COLON .

    RBRACE          reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    COMMENT         reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    VARIABLE        reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    FOR             reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    WHILE           reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    DO              reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    BREAK           reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    CONTINUE        reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    RETURN          reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    IF              reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    INT             reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    FLOAT           reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    CHAR            reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    DOUBLE          reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    VOID            reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    SHORT           reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    LONG            reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    LPAREN          reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    HEX_INT         reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    DOT_REAL        reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    EXP_REAL        reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    DEC_INT         reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    CHARACTER       reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    MAIN            reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    INCREMENT       reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    DECREMENT       reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    PRINTF          reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    $end            reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)
    ELSE            reduce using rule 17 (declaration -> type VARIABLE lparen rparen SEMI_COLON .)


state 188

    (16) declaration -> type VARIABLE lparen parameters rparen . SEMI_COLON
    (107) normal_function -> type VARIABLE lparen parameters rparen . lbrace statements rbrace
    (108) normal_function -> type VARIABLE lparen parameters rparen . lbrace rbrace
    (124) lbrace -> . LBRACE

    SEMI_COLON      shift and go to state 217
    LBRACE          shift and go to state 51

    lbrace                         shift and go to state 216

state 189

    (103) main_function -> type MAIN lparen rparen lbrace . statements rbrace
    (104) main_function -> type MAIN lparen rparen lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 218
    rbrace                         shift and go to state 219
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 190

    (99) main_function -> type MAIN lparen parameters rparen . lbrace statements rbrace
    (100) main_function -> type MAIN lparen parameters rparen . lbrace rbrace
    (124) lbrace -> . LBRACE

    LBRACE          shift and go to state 51

    lbrace                         shift and go to state 220

state 191

    (73) unary_expression -> unary_operator VARIABLE LBIG exp RBIG .

    SEMI_COLON      reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    ADD             reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    MINUS           reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    MULT            reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    DIV             reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    MOD             reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    L_OP            reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    G_OP            reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    LE_OP           reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    GE_OP           reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    NOTEQUALS       reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    EQUALS_OP       reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    OR_OP           reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    AND_OP          reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    MUL_ASSIGN      reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    DIV_ASSIGN      reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    MOD_ASSIGN      reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    ADD_ASSIGN      reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    SUB_ASSIGN      reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    LEFT_ASSIGN     reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    RIGHT_ASSIGN    reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    AND_ASSIGN      reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    XOR_ASSIGN      reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    OR_ASSIGN       reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    EQUALS          reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    RPAREN          reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    COMMA           reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    RBIG            reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)
    RBRACE          reduce using rule 73 (unary_expression -> unary_operator VARIABLE LBIG exp RBIG .)


state 192

    (76) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp . SEMI_COLON iterative_exp rparen lbrace rbrace

    SEMI_COLON      shift and go to state 221


state 193

    (88) iterative_exp -> exp COMMA iterative_exp .

    SEMI_COLON      reduce using rule 88 (iterative_exp -> exp COMMA iterative_exp .)
    RPAREN          reduce using rule 88 (iterative_exp -> exp COMMA iterative_exp .)


state 194

    (109) normal_function -> VARIABLE lparen parameters rparen lbrace . statements rbrace
    (110) normal_function -> VARIABLE lparen parameters rparen lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 222
    rbrace                         shift and go to state 223
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 195

    (120) arguments -> arguments COMMA exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    COMMA           reduce using rule 120 (arguments -> arguments COMMA exp .)
    RPAREN          reduce using rule 120 (arguments -> arguments COMMA exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81


state 196

    (113) normal_function -> VARIABLE lparen rparen lbrace statements . rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 224
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 197

    (114) normal_function -> VARIABLE lparen rparen lbrace rbrace .

    COMMENT         reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    VARIABLE        reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    FOR             reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    WHILE           reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    DO              reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    BREAK           reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    CONTINUE        reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    RETURN          reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    IF              reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    INT             reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    FLOAT           reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    CHAR            reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    DOUBLE          reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    VOID            reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    SHORT           reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    LONG            reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    LPAREN          reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    HEX_INT         reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    DOT_REAL        reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    EXP_REAL        reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    DEC_INT         reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    CHARACTER       reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    MAIN            reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    INCREMENT       reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    DECREMENT       reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    PRINTF          reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    $end            reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    RBRACE          reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)
    ELSE            reduce using rule 114 (normal_function -> VARIABLE lparen rparen lbrace rbrace .)


state 198

    (72) unary_expression -> VARIABLE LBIG exp RBIG unary_operator .

    SEMI_COLON      reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    ADD             reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    MINUS           reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    MULT            reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    DIV             reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    MOD             reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    L_OP            reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    G_OP            reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    LE_OP           reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    GE_OP           reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    NOTEQUALS       reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    EQUALS_OP       reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    OR_OP           reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    AND_OP          reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    MUL_ASSIGN      reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    DIV_ASSIGN      reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    MOD_ASSIGN      reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    ADD_ASSIGN      reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    SUB_ASSIGN      reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    LEFT_ASSIGN     reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    RIGHT_ASSIGN    reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    AND_ASSIGN      reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    XOR_ASSIGN      reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    OR_ASSIGN       reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    EQUALS          reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    RPAREN          reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    COMMA           reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    RBIG            reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)
    RBRACE          reduce using rule 72 (unary_expression -> VARIABLE LBIG exp RBIG unary_operator .)


state 199

    (90) conditional_statement -> IF lparen exp rparen statement .
    (92) conditional_statement -> IF lparen exp rparen statement . ELSE statement
    (94) conditional_statement -> IF lparen exp rparen statement . ELSE lbrace statements rbrace

    RBRACE          reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    COMMENT         reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    VARIABLE        reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    FOR             reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    WHILE           reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    DO              reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    BREAK           reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    CONTINUE        reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    RETURN          reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    IF              reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    INT             reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    FLOAT           reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    CHAR            reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    DOUBLE          reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    VOID            reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    SHORT           reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    LONG            reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    LPAREN          reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    HEX_INT         reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    DOT_REAL        reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    EXP_REAL        reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    DEC_INT         reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    CHARACTER       reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    MAIN            reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    INCREMENT       reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    DECREMENT       reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    PRINTF          reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    $end            reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .)
    ELSE            shift and go to state 225

  ! ELSE            [ reduce using rule 90 (conditional_statement -> IF lparen exp rparen statement .) ]


state 200

    (91) conditional_statement -> IF lparen exp rparen lbrace . statements rbrace
    (93) conditional_statement -> IF lparen exp rparen lbrace . statements rbrace ELSE statement
    (95) conditional_statement -> IF lparen exp rparen lbrace . statements rbrace ELSE lbrace statements rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 226
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 201

    (86) iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen . SEMI_COLON

    SEMI_COLON      shift and go to state 227


state 202

    (84) iterative_statement -> DO statement WHILE lparen exp rparen . SEMI_COLON

    SEMI_COLON      shift and go to state 228


state 203

    (85) iterative_statement -> DO lbrace statements rbrace WHILE lparen . exp rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    lparen                         shift and go to state 28
    unary_expression               shift and go to state 32
    print_function                 shift and go to state 34
    function_call                  shift and go to state 8
    exp                            shift and go to state 229
    constant                       shift and go to state 12
    unary_operator                 shift and go to state 24

state 204

    (87) iterative_statement -> DO lbrace rbrace WHILE lparen exp . rparen SEMI_COLON
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp
    (123) rparen -> . RPAREN

    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81
    RPAREN          shift and go to state 105

    rparen                         shift and go to state 230

state 205

    (82) iterative_statement -> WHILE lparen exp rparen lbrace statements . rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 231
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 206

    (83) iterative_statement -> WHILE lparen exp rparen lbrace rbrace .

    RBRACE          reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    COMMENT         reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    VARIABLE        reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    FOR             reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    WHILE           reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    DO              reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    BREAK           reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    CONTINUE        reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    RETURN          reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    IF              reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    INT             reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    FLOAT           reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    CHAR            reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    DOUBLE          reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    VOID            reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    SHORT           reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    LONG            reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    LPAREN          reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    HEX_INT         reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    DOT_REAL        reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    EXP_REAL        reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    DEC_INT         reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    CHARACTER       reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    MAIN            reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    INCREMENT       reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    DECREMENT       reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    PRINTF          reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    $end            reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)
    ELSE            reduce using rule 83 (iterative_statement -> WHILE lparen exp rparen lbrace rbrace .)


state 207

    (101) main_function -> MAIN lparen parameters rparen lbrace statements . rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 232
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 208

    (102) main_function -> MAIN lparen parameters rparen lbrace rbrace .

    RBRACE          reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    COMMENT         reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    VARIABLE        reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    FOR             reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    WHILE           reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    DO              reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    BREAK           reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    CONTINUE        reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    RETURN          reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    IF              reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    INT             reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    FLOAT           reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    CHAR            reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    DOUBLE          reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    VOID            reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    SHORT           reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    LONG            reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    LPAREN          reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    HEX_INT         reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    DOT_REAL        reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    EXP_REAL        reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    DEC_INT         reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    CHARACTER       reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    MAIN            reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    INCREMENT       reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    DECREMENT       reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    PRINTF          reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    $end            reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)
    ELSE            reduce using rule 102 (main_function -> MAIN lparen parameters rparen lbrace rbrace .)


state 209

    (105) main_function -> MAIN lparen rparen lbrace statements rbrace .

    RBRACE          reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    COMMENT         reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    VARIABLE        reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    FOR             reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    WHILE           reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    DO              reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    BREAK           reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    CONTINUE        reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    RETURN          reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    IF              reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    INT             reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    FLOAT           reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    CHAR            reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    DOUBLE          reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    VOID            reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    SHORT           reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    LONG            reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    LPAREN          reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    HEX_INT         reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    DOT_REAL        reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    EXP_REAL        reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    DEC_INT         reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    CHARACTER       reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    MAIN            reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    INCREMENT       reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    DECREMENT       reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    PRINTF          reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    $end            reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)
    ELSE            reduce using rule 105 (main_function -> MAIN lparen rparen lbrace statements rbrace .)


state 210

    (115) parameters -> type VARIABLE COMMA parameters .

    RPAREN          reduce using rule 115 (parameters -> type VARIABLE COMMA parameters .)


state 211

    (19) enum_list -> VARIABLE EQUALS exp COMMA enum_list .

    SEMI_COLON      reduce using rule 19 (enum_list -> VARIABLE EQUALS exp COMMA enum_list .)


state 212

    (23) enum_list -> VARIABLE LBIG exp RBIG EQUALS . LBRACE num_list RBRACE COMMA enum_list
    (25) enum_list -> VARIABLE LBIG exp RBIG EQUALS . LBRACE num_list RBRACE

    LBRACE          shift and go to state 233


state 213

    (22) enum_list -> VARIABLE LBIG exp RBIG COMMA . enum_list
    (18) enum_list -> . VARIABLE COMMA enum_list
    (19) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (20) enum_list -> . VARIABLE
    (21) enum_list -> . VARIABLE EQUALS exp
    (22) enum_list -> . VARIABLE LBIG exp RBIG COMMA enum_list
    (23) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (24) enum_list -> . VARIABLE LBIG exp RBIG
    (25) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    VARIABLE        shift and go to state 159

    enum_list                      shift and go to state 234

state 214

    (111) normal_function -> type VARIABLE lparen rparen lbrace statements . rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 235
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 215

    (112) normal_function -> type VARIABLE lparen rparen lbrace rbrace .

    COMMENT         reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    VARIABLE        reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    FOR             reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    WHILE           reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    DO              reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    BREAK           reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    CONTINUE        reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    RETURN          reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    IF              reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    INT             reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    FLOAT           reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    CHAR            reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    DOUBLE          reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    VOID            reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    SHORT           reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    LONG            reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    LPAREN          reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    HEX_INT         reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    DOT_REAL        reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    EXP_REAL        reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    DEC_INT         reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    CHARACTER       reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    MAIN            reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    INCREMENT       reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    DECREMENT       reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    PRINTF          reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    $end            reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    RBRACE          reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)
    ELSE            reduce using rule 112 (normal_function -> type VARIABLE lparen rparen lbrace rbrace .)


state 216

    (107) normal_function -> type VARIABLE lparen parameters rparen lbrace . statements rbrace
    (108) normal_function -> type VARIABLE lparen parameters rparen lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 236
    rbrace                         shift and go to state 237
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 217

    (16) declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .

    RBRACE          reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    COMMENT         reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    VARIABLE        reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    FOR             reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    WHILE           reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    DO              reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    BREAK           reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    CONTINUE        reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    RETURN          reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    IF              reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    INT             reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    FLOAT           reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    CHAR            reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    DOUBLE          reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    VOID            reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    SHORT           reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    LONG            reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    LPAREN          reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    HEX_INT         reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    DOT_REAL        reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    EXP_REAL        reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    DEC_INT         reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    CHARACTER       reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    MAIN            reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    INCREMENT       reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    DECREMENT       reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    PRINTF          reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    $end            reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)
    ELSE            reduce using rule 16 (declaration -> type VARIABLE lparen parameters rparen SEMI_COLON .)


state 218

    (103) main_function -> type MAIN lparen rparen lbrace statements . rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 238
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 219

    (104) main_function -> type MAIN lparen rparen lbrace rbrace .

    RBRACE          reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    COMMENT         reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    VARIABLE        reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    FOR             reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    WHILE           reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    DO              reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    BREAK           reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    CONTINUE        reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    RETURN          reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    IF              reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    INT             reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    FLOAT           reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    CHAR            reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    DOUBLE          reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    VOID            reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    SHORT           reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    LONG            reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    LPAREN          reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    HEX_INT         reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    DOT_REAL        reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    EXP_REAL        reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    DEC_INT         reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    CHARACTER       reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    MAIN            reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    INCREMENT       reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    DECREMENT       reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    PRINTF          reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    $end            reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)
    ELSE            reduce using rule 104 (main_function -> type MAIN lparen rparen lbrace rbrace .)


state 220

    (99) main_function -> type MAIN lparen parameters rparen lbrace . statements rbrace
    (100) main_function -> type MAIN lparen parameters rparen lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 239
    rbrace                         shift and go to state 240
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 221

    (76) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp rparen statement
    (77) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON . iterative_exp rparen lbrace rbrace
    (88) iterative_exp -> . exp COMMA iterative_exp
    (89) iterative_exp -> . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    exp                            shift and go to state 114
    lparen                         shift and go to state 28
    unary_expression               shift and go to state 32
    iterative_exp                  shift and go to state 241
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    unary_operator                 shift and go to state 24

state 222

    (109) normal_function -> VARIABLE lparen parameters rparen lbrace statements . rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 242
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 223

    (110) normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .

    COMMENT         reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    VARIABLE        reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    FOR             reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    WHILE           reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    DO              reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    BREAK           reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    CONTINUE        reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    RETURN          reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    IF              reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    INT             reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    FLOAT           reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    CHAR            reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    DOUBLE          reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    VOID            reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    SHORT           reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    LONG            reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    LPAREN          reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    HEX_INT         reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    DOT_REAL        reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    EXP_REAL        reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    DEC_INT         reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    CHARACTER       reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    MAIN            reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    INCREMENT       reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    DECREMENT       reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    PRINTF          reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    $end            reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    RBRACE          reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)
    ELSE            reduce using rule 110 (normal_function -> VARIABLE lparen parameters rparen lbrace rbrace .)


state 224

    (113) normal_function -> VARIABLE lparen rparen lbrace statements rbrace .

    COMMENT         reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    VARIABLE        reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    FOR             reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    WHILE           reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    DO              reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    BREAK           reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    CONTINUE        reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    RETURN          reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    IF              reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    INT             reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    FLOAT           reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    CHAR            reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    DOUBLE          reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    VOID            reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    SHORT           reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    LONG            reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    LPAREN          reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    HEX_INT         reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    DOT_REAL        reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    EXP_REAL        reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    DEC_INT         reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    CHARACTER       reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    MAIN            reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    INCREMENT       reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    DECREMENT       reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    PRINTF          reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    $end            reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    RBRACE          reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)
    ELSE            reduce using rule 113 (normal_function -> VARIABLE lparen rparen lbrace statements rbrace .)


state 225

    (92) conditional_statement -> IF lparen exp rparen statement ELSE . statement
    (94) conditional_statement -> IF lparen exp rparen statement ELSE . lbrace statements rbrace
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (124) lbrace -> . LBRACE
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    COMMENT         shift and go to state 14
    LBRACE          shift and go to state 51
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 243
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    lbrace                         shift and go to state 244
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 226

    (91) conditional_statement -> IF lparen exp rparen lbrace statements . rbrace
    (93) conditional_statement -> IF lparen exp rparen lbrace statements . rbrace ELSE statement
    (95) conditional_statement -> IF lparen exp rparen lbrace statements . rbrace ELSE lbrace statements rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 245
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 227

    (86) iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .

    RBRACE          reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    COMMENT         reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    VARIABLE        reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    FOR             reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    WHILE           reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    DO              reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    BREAK           reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    CONTINUE        reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    RETURN          reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    IF              reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    INT             reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    FLOAT           reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    CHAR            reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    DOUBLE          reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    VOID            reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    SHORT           reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    LONG            reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    LPAREN          reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    HEX_INT         reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    DOT_REAL        reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    EXP_REAL        reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    DEC_INT         reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    CHARACTER       reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    MAIN            reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    INCREMENT       reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    DECREMENT       reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    PRINTF          reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    $end            reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)
    ELSE            reduce using rule 86 (iterative_statement -> DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON .)


state 228

    (84) iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .

    RBRACE          reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    COMMENT         reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    VARIABLE        reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    FOR             reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    WHILE           reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    DO              reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    BREAK           reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    CONTINUE        reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    RETURN          reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    IF              reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    INT             reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    FLOAT           reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    CHAR            reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    DOUBLE          reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    VOID            reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    SHORT           reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    LONG            reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    LPAREN          reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    HEX_INT         reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    DOT_REAL        reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    EXP_REAL        reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    DEC_INT         reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    CHARACTER       reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    MAIN            reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    INCREMENT       reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    DECREMENT       reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    PRINTF          reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    $end            reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)
    ELSE            reduce using rule 84 (iterative_statement -> DO statement WHILE lparen exp rparen SEMI_COLON .)


state 229

    (85) iterative_statement -> DO lbrace statements rbrace WHILE lparen exp . rparen SEMI_COLON
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp
    (123) rparen -> . RPAREN

    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81
    RPAREN          shift and go to state 105

    rparen                         shift and go to state 246

state 230

    (87) iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen . SEMI_COLON

    SEMI_COLON      shift and go to state 247


state 231

    (82) iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .

    RBRACE          reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    COMMENT         reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    VARIABLE        reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    FOR             reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    WHILE           reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    DO              reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    BREAK           reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    CONTINUE        reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    RETURN          reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    IF              reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    INT             reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    FLOAT           reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    CHAR            reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    DOUBLE          reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    VOID            reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    SHORT           reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    LONG            reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    LPAREN          reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    HEX_INT         reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    DOT_REAL        reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    EXP_REAL        reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    DEC_INT         reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    CHARACTER       reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    MAIN            reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    INCREMENT       reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    DECREMENT       reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    PRINTF          reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    $end            reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)
    ELSE            reduce using rule 82 (iterative_statement -> WHILE lparen exp rparen lbrace statements rbrace .)


state 232

    (101) main_function -> MAIN lparen parameters rparen lbrace statements rbrace .

    RBRACE          reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    COMMENT         reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    VARIABLE        reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    FOR             reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    WHILE           reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    DO              reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    BREAK           reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    CONTINUE        reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    RETURN          reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    IF              reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    INT             reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    FLOAT           reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    CHAR            reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    DOUBLE          reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    VOID            reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    SHORT           reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    LONG            reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    LPAREN          reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    HEX_INT         reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    DOT_REAL        reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    EXP_REAL        reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    DEC_INT         reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    CHARACTER       reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    MAIN            reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    INCREMENT       reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    DECREMENT       reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    PRINTF          reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    $end            reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)
    ELSE            reduce using rule 101 (main_function -> MAIN lparen parameters rparen lbrace statements rbrace .)


state 233

    (23) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE . num_list RBRACE COMMA enum_list
    (25) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE . num_list RBRACE
    (26) num_list -> . exp COMMA num_list
    (27) num_list -> . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    exp                            shift and go to state 248
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    constant                       shift and go to state 12
    num_list                       shift and go to state 249
    unary_operator                 shift and go to state 24

state 234

    (22) enum_list -> VARIABLE LBIG exp RBIG COMMA enum_list .

    SEMI_COLON      reduce using rule 22 (enum_list -> VARIABLE LBIG exp RBIG COMMA enum_list .)


state 235

    (111) normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .

    COMMENT         reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    VARIABLE        reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    FOR             reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    WHILE           reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    DO              reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    BREAK           reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    CONTINUE        reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    RETURN          reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    IF              reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    INT             reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    FLOAT           reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    CHAR            reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    DOUBLE          reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    VOID            reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    SHORT           reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    LONG            reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    LPAREN          reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    HEX_INT         reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    DOT_REAL        reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    EXP_REAL        reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    DEC_INT         reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    CHARACTER       reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    MAIN            reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    INCREMENT       reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    DECREMENT       reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    PRINTF          reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    $end            reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    RBRACE          reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)
    ELSE            reduce using rule 111 (normal_function -> type VARIABLE lparen rparen lbrace statements rbrace .)


state 236

    (107) normal_function -> type VARIABLE lparen parameters rparen lbrace statements . rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 250
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 237

    (108) normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .

    COMMENT         reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    VARIABLE        reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    FOR             reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    WHILE           reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    DO              reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    BREAK           reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    CONTINUE        reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    RETURN          reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    IF              reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    INT             reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    FLOAT           reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    CHAR            reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    DOUBLE          reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    VOID            reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    SHORT           reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    LONG            reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    LPAREN          reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    HEX_INT         reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    DOT_REAL        reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    EXP_REAL        reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    DEC_INT         reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    CHARACTER       reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    MAIN            reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    INCREMENT       reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    DECREMENT       reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    PRINTF          reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    $end            reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    RBRACE          reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)
    ELSE            reduce using rule 108 (normal_function -> type VARIABLE lparen parameters rparen lbrace rbrace .)


state 238

    (103) main_function -> type MAIN lparen rparen lbrace statements rbrace .

    RBRACE          reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    COMMENT         reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    VARIABLE        reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    FOR             reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    WHILE           reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    DO              reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    BREAK           reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    CONTINUE        reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    RETURN          reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    IF              reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    INT             reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    FLOAT           reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    CHAR            reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    DOUBLE          reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    VOID            reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    SHORT           reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    LONG            reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    LPAREN          reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    HEX_INT         reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    DOT_REAL        reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    EXP_REAL        reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    DEC_INT         reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    CHARACTER       reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    MAIN            reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    INCREMENT       reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    DECREMENT       reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    PRINTF          reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    $end            reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)
    ELSE            reduce using rule 103 (main_function -> type MAIN lparen rparen lbrace statements rbrace .)


state 239

    (99) main_function -> type MAIN lparen parameters rparen lbrace statements . rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 251
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 240

    (100) main_function -> type MAIN lparen parameters rparen lbrace rbrace .

    RBRACE          reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    COMMENT         reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    VARIABLE        reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    FOR             reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    WHILE           reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    DO              reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    BREAK           reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    CONTINUE        reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    RETURN          reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    IF              reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    INT             reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    FLOAT           reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    CHAR            reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    DOUBLE          reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    VOID            reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    SHORT           reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    LONG            reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    LPAREN          reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    HEX_INT         reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    DOT_REAL        reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    EXP_REAL        reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    DEC_INT         reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    CHARACTER       reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    MAIN            reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    INCREMENT       reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    DECREMENT       reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    PRINTF          reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    $end            reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)
    ELSE            reduce using rule 100 (main_function -> type MAIN lparen parameters rparen lbrace rbrace .)


state 241

    (76) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . rparen statement
    (77) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . rparen lbrace statements rbrace
    (78) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . rparen SEMI_COLON
    (79) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp . rparen lbrace rbrace
    (123) rparen -> . RPAREN

    RPAREN          shift and go to state 105

    rparen                         shift and go to state 252

state 242

    (109) normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .

    COMMENT         reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    VARIABLE        reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    FOR             reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    WHILE           reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    DO              reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    BREAK           reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    CONTINUE        reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    RETURN          reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    IF              reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    INT             reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    FLOAT           reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    CHAR            reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    DOUBLE          reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    VOID            reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    SHORT           reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    LONG            reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    LPAREN          reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    HEX_INT         reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    DOT_REAL        reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    EXP_REAL        reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    DEC_INT         reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    CHARACTER       reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    MAIN            reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    INCREMENT       reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    DECREMENT       reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    PRINTF          reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    $end            reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    RBRACE          reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)
    ELSE            reduce using rule 109 (normal_function -> VARIABLE lparen parameters rparen lbrace statements rbrace .)


state 243

    (92) conditional_statement -> IF lparen exp rparen statement ELSE statement .

    RBRACE          reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    COMMENT         reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    VARIABLE        reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    FOR             reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    WHILE           reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    DO              reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    BREAK           reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    CONTINUE        reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    RETURN          reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    IF              reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    INT             reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    FLOAT           reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    CHAR            reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    DOUBLE          reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    VOID            reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    SHORT           reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    LONG            reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    LPAREN          reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    HEX_INT         reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    DOT_REAL        reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    EXP_REAL        reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    DEC_INT         reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    CHARACTER       reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    MAIN            reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    INCREMENT       reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    DECREMENT       reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    PRINTF          reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    $end            reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)
    ELSE            reduce using rule 92 (conditional_statement -> IF lparen exp rparen statement ELSE statement .)


state 244

    (94) conditional_statement -> IF lparen exp rparen statement ELSE lbrace . statements rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 253
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 245

    (91) conditional_statement -> IF lparen exp rparen lbrace statements rbrace .
    (93) conditional_statement -> IF lparen exp rparen lbrace statements rbrace . ELSE statement
    (95) conditional_statement -> IF lparen exp rparen lbrace statements rbrace . ELSE lbrace statements rbrace

    RBRACE          reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    COMMENT         reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    VARIABLE        reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    FOR             reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    WHILE           reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    DO              reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    BREAK           reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    CONTINUE        reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    RETURN          reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    IF              reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    INT             reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    FLOAT           reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    CHAR            reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    DOUBLE          reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    VOID            reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    SHORT           reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    LONG            reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    LPAREN          reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    HEX_INT         reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    DOT_REAL        reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    EXP_REAL        reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    DEC_INT         reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    CHARACTER       reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    MAIN            reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    INCREMENT       reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    DECREMENT       reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    PRINTF          reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    $end            reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .)
    ELSE            shift and go to state 254

  ! ELSE            [ reduce using rule 91 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace .) ]


state 246

    (85) iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen . SEMI_COLON

    SEMI_COLON      shift and go to state 255


state 247

    (87) iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .

    RBRACE          reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    COMMENT         reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    VARIABLE        reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    FOR             reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    WHILE           reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    DO              reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    BREAK           reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    CONTINUE        reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    RETURN          reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    IF              reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    INT             reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    FLOAT           reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    CHAR            reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    DOUBLE          reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    VOID            reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    SHORT           reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    LONG            reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    LPAREN          reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    HEX_INT         reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    DOT_REAL        reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    EXP_REAL        reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    DEC_INT         reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    CHARACTER       reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    MAIN            reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    INCREMENT       reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    DECREMENT       reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    PRINTF          reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    $end            reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)
    ELSE            reduce using rule 87 (iterative_statement -> DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON .)


state 248

    (26) num_list -> exp . COMMA num_list
    (27) num_list -> exp .
    (40) exp -> exp . ADD exp
    (41) exp -> exp . MINUS exp
    (42) exp -> exp . MULT exp
    (43) exp -> exp . DIV exp
    (44) exp -> exp . MOD exp
    (45) exp -> exp . L_OP exp
    (46) exp -> exp . G_OP exp
    (47) exp -> exp . LE_OP exp
    (48) exp -> exp . GE_OP exp
    (49) exp -> exp . NOTEQUALS exp
    (50) exp -> exp . EQUALS_OP exp
    (51) exp -> exp . OR_OP exp
    (52) exp -> exp . AND_OP exp
    (53) exp -> exp . MUL_ASSIGN exp
    (54) exp -> exp . DIV_ASSIGN exp
    (55) exp -> exp . MOD_ASSIGN exp
    (56) exp -> exp . ADD_ASSIGN exp
    (57) exp -> exp . SUB_ASSIGN exp
    (58) exp -> exp . LEFT_ASSIGN exp
    (59) exp -> exp . RIGHT_ASSIGN exp
    (60) exp -> exp . AND_ASSIGN exp
    (61) exp -> exp . XOR_ASSIGN exp
    (62) exp -> exp . OR_ASSIGN exp
    (63) exp -> exp . EQUALS exp

    COMMA           shift and go to state 256
    RBRACE          reduce using rule 27 (num_list -> exp .)
    ADD             shift and go to state 83
    MINUS           shift and go to state 73
    MULT            shift and go to state 74
    DIV             shift and go to state 72
    MOD             shift and go to state 92
    L_OP            shift and go to state 89
    G_OP            shift and go to state 77
    LE_OP           shift and go to state 75
    GE_OP           shift and go to state 84
    NOTEQUALS       shift and go to state 68
    EQUALS_OP       shift and go to state 69
    OR_OP           shift and go to state 78
    AND_OP          shift and go to state 82
    MUL_ASSIGN      shift and go to state 90
    DIV_ASSIGN      shift and go to state 70
    MOD_ASSIGN      shift and go to state 86
    ADD_ASSIGN      shift and go to state 80
    SUB_ASSIGN      shift and go to state 85
    LEFT_ASSIGN     shift and go to state 91
    RIGHT_ASSIGN    shift and go to state 76
    AND_ASSIGN      shift and go to state 79
    XOR_ASSIGN      shift and go to state 87
    OR_ASSIGN       shift and go to state 88
    EQUALS          shift and go to state 81


state 249

    (23) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list . RBRACE COMMA enum_list
    (25) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list . RBRACE

    RBRACE          shift and go to state 257


state 250

    (107) normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .

    COMMENT         reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    VARIABLE        reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    FOR             reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    WHILE           reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    DO              reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    BREAK           reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    CONTINUE        reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    RETURN          reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    IF              reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    INT             reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    FLOAT           reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    CHAR            reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    DOUBLE          reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    VOID            reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    SHORT           reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    LONG            reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    LPAREN          reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    HEX_INT         reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    DOT_REAL        reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    EXP_REAL        reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    DEC_INT         reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    CHARACTER       reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    MAIN            reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    INCREMENT       reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    DECREMENT       reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    PRINTF          reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    $end            reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    RBRACE          reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)
    ELSE            reduce using rule 107 (normal_function -> type VARIABLE lparen parameters rparen lbrace statements rbrace .)


state 251

    (99) main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .

    RBRACE          reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    COMMENT         reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    VARIABLE        reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    FOR             reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    WHILE           reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    DO              reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    BREAK           reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    CONTINUE        reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    RETURN          reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    IF              reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    INT             reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    FLOAT           reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    CHAR            reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    DOUBLE          reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    VOID            reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    SHORT           reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    LONG            reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    LPAREN          reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    HEX_INT         reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    DOT_REAL        reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    EXP_REAL        reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    DEC_INT         reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    CHARACTER       reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    MAIN            reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    INCREMENT       reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    DECREMENT       reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    PRINTF          reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    $end            reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)
    ELSE            reduce using rule 99 (main_function -> type MAIN lparen parameters rparen lbrace statements rbrace .)


state 252

    (76) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen . statement
    (77) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen . lbrace statements rbrace
    (78) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen . SEMI_COLON
    (79) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen . lbrace rbrace
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (124) lbrace -> . LBRACE
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    SEMI_COLON      shift and go to state 258
    COMMENT         shift and go to state 14
    LBRACE          shift and go to state 51
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 259
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    lbrace                         shift and go to state 260
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 253

    (94) conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements . rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 261
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 254

    (93) conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE . statement
    (95) conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE . lbrace statements rbrace
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (124) lbrace -> . LBRACE
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    COMMENT         shift and go to state 14
    LBRACE          shift and go to state 51
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 262
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    lbrace                         shift and go to state 263
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 255

    (85) iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .

    RBRACE          reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    COMMENT         reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    VARIABLE        reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    FOR             reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    WHILE           reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    DO              reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    BREAK           reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    CONTINUE        reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    RETURN          reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    IF              reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    INT             reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    FLOAT           reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    CHAR            reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    DOUBLE          reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    VOID            reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    SHORT           reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    LONG            reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    LPAREN          reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    HEX_INT         reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    DOT_REAL        reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    EXP_REAL        reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    DEC_INT         reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    CHARACTER       reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    MAIN            reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    INCREMENT       reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    DECREMENT       reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    PRINTF          reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    $end            reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)
    ELSE            reduce using rule 85 (iterative_statement -> DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON .)


state 256

    (26) num_list -> exp COMMA . num_list
    (26) num_list -> . exp COMMA num_list
    (27) num_list -> . exp
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    print_function                 shift and go to state 34
    constant                       shift and go to state 12
    exp                            shift and go to state 248
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    lparen                         shift and go to state 28
    num_list                       shift and go to state 264
    unary_operator                 shift and go to state 24

state 257

    (23) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE . COMMA enum_list
    (25) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE .

    COMMA           shift and go to state 265
    SEMI_COLON      reduce using rule 25 (enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE .)


state 258

    (78) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .

    RBRACE          reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    COMMENT         reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    VARIABLE        reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    FOR             reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    WHILE           reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    DO              reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    BREAK           reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    CONTINUE        reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    RETURN          reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    IF              reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    INT             reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    FLOAT           reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    CHAR            reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    DOUBLE          reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    VOID            reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    SHORT           reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    LONG            reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    LPAREN          reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    HEX_INT         reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    DOT_REAL        reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    EXP_REAL        reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    DEC_INT         reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    CHARACTER       reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    MAIN            reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    INCREMENT       reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    DECREMENT       reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    PRINTF          reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    $end            reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)
    ELSE            reduce using rule 78 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON .)


state 259

    (76) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .

    RBRACE          reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    COMMENT         reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    VARIABLE        reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    FOR             reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    WHILE           reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    DO              reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    BREAK           reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    CONTINUE        reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    RETURN          reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    IF              reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    INT             reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    FLOAT           reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    CHAR            reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    DOUBLE          reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    VOID            reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    SHORT           reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    LONG            reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    LPAREN          reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    HEX_INT         reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    DOT_REAL        reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    EXP_REAL        reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    DEC_INT         reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    CHARACTER       reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    MAIN            reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    INCREMENT       reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    DECREMENT       reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    PRINTF          reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    $end            reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)
    ELSE            reduce using rule 76 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement .)


state 260

    (77) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace . statements rbrace
    (79) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace . rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 266
    rbrace                         shift and go to state 267
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 261

    (94) conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .

    RBRACE          reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    COMMENT         reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    VARIABLE        reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    FOR             reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    WHILE           reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    DO              reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    BREAK           reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    CONTINUE        reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    RETURN          reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    IF              reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    INT             reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    FLOAT           reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    CHAR            reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    DOUBLE          reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    VOID            reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    SHORT           reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    LONG            reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    LPAREN          reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    HEX_INT         reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    DOT_REAL        reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    EXP_REAL        reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    DEC_INT         reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    CHARACTER       reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    MAIN            reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    INCREMENT       reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    DECREMENT       reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    PRINTF          reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    $end            reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)
    ELSE            reduce using rule 94 (conditional_statement -> IF lparen exp rparen statement ELSE lbrace statements rbrace .)


state 262

    (93) conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .

    RBRACE          reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    COMMENT         reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    VARIABLE        reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    FOR             reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    WHILE           reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    DO              reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    BREAK           reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    CONTINUE        reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    RETURN          reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    IF              reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    INT             reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    FLOAT           reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    CHAR            reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    DOUBLE          reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    VOID            reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    SHORT           reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    LONG            reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    LPAREN          reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    HEX_INT         reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    DOT_REAL        reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    EXP_REAL        reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    DEC_INT         reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    CHARACTER       reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    MAIN            reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    INCREMENT       reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    DECREMENT       reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    PRINTF          reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    $end            reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)
    ELSE            reduce using rule 93 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE statement .)


state 263

    (95) conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace . statements rbrace
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    statements                     shift and go to state 268
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 21
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 264

    (26) num_list -> exp COMMA num_list .

    RBRACE          reduce using rule 26 (num_list -> exp COMMA num_list .)


state 265

    (23) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA . enum_list
    (18) enum_list -> . VARIABLE COMMA enum_list
    (19) enum_list -> . VARIABLE EQUALS exp COMMA enum_list
    (20) enum_list -> . VARIABLE
    (21) enum_list -> . VARIABLE EQUALS exp
    (22) enum_list -> . VARIABLE LBIG exp RBIG COMMA enum_list
    (23) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list
    (24) enum_list -> . VARIABLE LBIG exp RBIG
    (25) enum_list -> . VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE

    VARIABLE        shift and go to state 159

    enum_list                      shift and go to state 269

state 266

    (77) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements . rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 270
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 267

    (79) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .

    RBRACE          reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    COMMENT         reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    VARIABLE        reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    FOR             reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    WHILE           reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    DO              reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    BREAK           reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    CONTINUE        reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    RETURN          reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    IF              reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    INT             reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    FLOAT           reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    CHAR            reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    DOUBLE          reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    VOID            reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    SHORT           reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    LONG            reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    LPAREN          reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    HEX_INT         reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    DOT_REAL        reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    EXP_REAL        reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    DEC_INT         reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    CHARACTER       reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    MAIN            reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    INCREMENT       reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    DECREMENT       reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    PRINTF          reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    $end            reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)
    ELSE            reduce using rule 79 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace .)


state 268

    (95) conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements . rbrace
    (2) statements -> statements . statement
    (125) rbrace -> . RBRACE
    (4) statement -> . declaration
    (5) statement -> . exp SEMI_COLON
    (6) statement -> . iterative_statement
    (7) statement -> . function
    (8) statement -> . constant_statement
    (9) statement -> . conditional_statement
    (10) statement -> . COMMENT
    (15) declaration -> . type enum_list SEMI_COLON
    (16) declaration -> . type VARIABLE lparen parameters rparen SEMI_COLON
    (17) declaration -> . type VARIABLE lparen rparen SEMI_COLON
    (40) exp -> . exp ADD exp
    (41) exp -> . exp MINUS exp
    (42) exp -> . exp MULT exp
    (43) exp -> . exp DIV exp
    (44) exp -> . exp MOD exp
    (45) exp -> . exp L_OP exp
    (46) exp -> . exp G_OP exp
    (47) exp -> . exp LE_OP exp
    (48) exp -> . exp GE_OP exp
    (49) exp -> . exp NOTEQUALS exp
    (50) exp -> . exp EQUALS_OP exp
    (51) exp -> . exp OR_OP exp
    (52) exp -> . exp AND_OP exp
    (53) exp -> . exp MUL_ASSIGN exp
    (54) exp -> . exp DIV_ASSIGN exp
    (55) exp -> . exp MOD_ASSIGN exp
    (56) exp -> . exp ADD_ASSIGN exp
    (57) exp -> . exp SUB_ASSIGN exp
    (58) exp -> . exp LEFT_ASSIGN exp
    (59) exp -> . exp RIGHT_ASSIGN exp
    (60) exp -> . exp AND_ASSIGN exp
    (61) exp -> . exp XOR_ASSIGN exp
    (62) exp -> . exp OR_ASSIGN exp
    (63) exp -> . exp EQUALS exp
    (64) exp -> . unary_expression
    (65) exp -> . lparen exp rparen
    (66) exp -> . constant
    (67) exp -> . VARIABLE
    (68) exp -> . VARIABLE LBIG exp RBIG
    (69) exp -> . function_call
    (76) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen statement
    (77) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace
    (78) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen SEMI_COLON
    (79) iterative_statement -> . FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace rbrace
    (80) iterative_statement -> . WHILE lparen exp rparen statement
    (81) iterative_statement -> . WHILE lparen exp rparen SEMI_COLON
    (82) iterative_statement -> . WHILE lparen exp rparen lbrace statements rbrace
    (83) iterative_statement -> . WHILE lparen exp rparen lbrace rbrace
    (84) iterative_statement -> . DO statement WHILE lparen exp rparen SEMI_COLON
    (85) iterative_statement -> . DO lbrace statements rbrace WHILE lparen exp rparen SEMI_COLON
    (86) iterative_statement -> . DO SEMI_COLON WHILE lparen exp rparen SEMI_COLON
    (87) iterative_statement -> . DO lbrace rbrace WHILE lparen exp rparen SEMI_COLON
    (96) function -> . normal_function
    (97) function -> . main_function
    (11) constant_statement -> . BREAK SEMI_COLON
    (12) constant_statement -> . CONTINUE SEMI_COLON
    (13) constant_statement -> . RETURN SEMI_COLON
    (14) constant_statement -> . RETURN exp SEMI_COLON
    (90) conditional_statement -> . IF lparen exp rparen statement
    (91) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace
    (92) conditional_statement -> . IF lparen exp rparen statement ELSE statement
    (93) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE statement
    (94) conditional_statement -> . IF lparen exp rparen statement ELSE lbrace statements rbrace
    (95) conditional_statement -> . IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace
    (28) type -> . INT
    (29) type -> . FLOAT
    (30) type -> . CHAR
    (31) type -> . DOUBLE
    (32) type -> . VOID
    (33) type -> . SHORT
    (34) type -> . LONG
    (70) unary_expression -> . VARIABLE unary_operator
    (71) unary_expression -> . unary_operator VARIABLE
    (72) unary_expression -> . VARIABLE LBIG exp RBIG unary_operator
    (73) unary_expression -> . unary_operator VARIABLE LBIG exp RBIG
    (122) lparen -> . LPAREN
    (35) constant -> . HEX_INT
    (36) constant -> . DOT_REAL
    (37) constant -> . EXP_REAL
    (38) constant -> . DEC_INT
    (39) constant -> . CHARACTER
    (117) function_call -> . VARIABLE lparen arguments rparen
    (118) function_call -> . VARIABLE lparen rparen
    (119) function_call -> . print_function
    (107) normal_function -> . type VARIABLE lparen parameters rparen lbrace statements rbrace
    (108) normal_function -> . type VARIABLE lparen parameters rparen lbrace rbrace
    (109) normal_function -> . VARIABLE lparen parameters rparen lbrace statements rbrace
    (110) normal_function -> . VARIABLE lparen parameters rparen lbrace rbrace
    (111) normal_function -> . type VARIABLE lparen rparen lbrace statements rbrace
    (112) normal_function -> . type VARIABLE lparen rparen lbrace rbrace
    (113) normal_function -> . VARIABLE lparen rparen lbrace statements rbrace
    (114) normal_function -> . VARIABLE lparen rparen lbrace rbrace
    (99) main_function -> . type MAIN lparen parameters rparen lbrace statements rbrace
    (100) main_function -> . type MAIN lparen parameters rparen lbrace rbrace
    (101) main_function -> . MAIN lparen parameters rparen lbrace statements rbrace
    (102) main_function -> . MAIN lparen parameters rparen lbrace rbrace
    (103) main_function -> . type MAIN lparen rparen lbrace statements rbrace
    (104) main_function -> . type MAIN lparen rparen lbrace rbrace
    (105) main_function -> . MAIN lparen rparen lbrace statements rbrace
    (106) main_function -> . MAIN lparen rparen lbrace rbrace
    (74) unary_operator -> . INCREMENT
    (75) unary_operator -> . DECREMENT
    (98) print_function -> . PRINTF lparen exp rparen

    RBRACE          shift and go to state 99
    COMMENT         shift and go to state 14
    VARIABLE        shift and go to state 30
    FOR             shift and go to state 27
    WHILE           shift and go to state 10
    DO              shift and go to state 4
    BREAK           shift and go to state 41
    CONTINUE        shift and go to state 42
    RETURN          shift and go to state 1
    IF              shift and go to state 35
    INT             shift and go to state 36
    FLOAT           shift and go to state 40
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 37
    VOID            shift and go to state 5
    SHORT           shift and go to state 11
    LONG            shift and go to state 44
    LPAREN          shift and go to state 15
    HEX_INT         shift and go to state 38
    DOT_REAL        shift and go to state 22
    EXP_REAL        shift and go to state 17
    DEC_INT         shift and go to state 18
    CHARACTER       shift and go to state 7
    MAIN            shift and go to state 16
    INCREMENT       shift and go to state 26
    DECREMENT       shift and go to state 33
    PRINTF          shift and go to state 6

    main_function                  shift and go to state 2
    rbrace                         shift and go to state 271
    unary_expression               shift and go to state 32
    function_call                  shift and go to state 8
    constant                       shift and go to state 12
    iterative_statement            shift and go to state 13
    conditional_statement          shift and go to state 19
    statement                      shift and go to state 48
    type                           shift and go to state 23
    unary_operator                 shift and go to state 24
    function                       shift and go to state 25
    lparen                         shift and go to state 28
    declaration                    shift and go to state 29
    print_function                 shift and go to state 34
    constant_statement             shift and go to state 31
    normal_function                shift and go to state 39
    exp                            shift and go to state 43

state 269

    (23) enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list .

    SEMI_COLON      reduce using rule 23 (enum_list -> VARIABLE LBIG exp RBIG EQUALS LBRACE num_list RBRACE COMMA enum_list .)


state 270

    (77) iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .

    RBRACE          reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    COMMENT         reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    VARIABLE        reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    FOR             reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    WHILE           reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    DO              reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    BREAK           reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    CONTINUE        reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    RETURN          reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    IF              reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    INT             reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    FLOAT           reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    CHAR            reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    DOUBLE          reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    VOID            reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    SHORT           reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    LONG            reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    LPAREN          reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    HEX_INT         reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    DOT_REAL        reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    EXP_REAL        reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    DEC_INT         reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    CHARACTER       reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    MAIN            reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    INCREMENT       reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    DECREMENT       reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    PRINTF          reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    $end            reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)
    ELSE            reduce using rule 77 (iterative_statement -> FOR lparen iterative_exp SEMI_COLON iterative_exp SEMI_COLON iterative_exp rparen lbrace statements rbrace .)


state 271

    (95) conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .

    RBRACE          reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    COMMENT         reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    VARIABLE        reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    FOR             reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    WHILE           reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    DO              reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    BREAK           reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    CONTINUE        reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    RETURN          reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    IF              reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    INT             reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    FLOAT           reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    CHAR            reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    DOUBLE          reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    VOID            reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    SHORT           reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    LONG            reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    LPAREN          reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    HEX_INT         reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    DOT_REAL        reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    EXP_REAL        reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    DEC_INT         reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    CHARACTER       reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    MAIN            reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    INCREMENT       reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    DECREMENT       reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    PRINTF          reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    $end            reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)
    ELSE            reduce using rule 95 (conditional_statement -> IF lparen exp rparen lbrace statements rbrace ELSE lbrace statements rbrace .)

